<article>
  <include article="html.he">
    <var name="html.title" value="Core: Action"/>
    <var name="html.body">
      <div id="info">
        Defines a runtime Action for execution only within the process
        space. This means that custom Actions can be defined inline and
        are accessible only during the current process request.

        This functionality is very powerful and should be used with some
        prejudice. The Action action allows the calling application to
        create a bridge between the content and the underlying code.

        The Action action can also be used to extend Helium's built-in
        action set by defining new actions.
      </div>

      <!-- Example 1 -->
      <h3>Example 1: Implementing and using an Action</h3>
      <include article="example.he">
        <var name="example.index" value="1"/>
        <var name="example.message">Java Class, my.actions.MyAction</var>
        <var name="example.text"><![CDATA[
package my.actions.MyAction;
import com.thesleepless.helium.action.AbstractAction;

public class MyAction extends AbstractAction {
  public void service(Article article, HeliumContext context)
  throws HeliumException {
    context.getWriter().write(article.getName() +
      &quot; called successfully&quot;);
  }
}]]></var>
      </include>

      <include article="example-output.he">
        <var name="example.index" value="1"/>
        <var name="example.message">Article: my-article.he</var>
        <var name="example.text">
<![CDATA[&lt;article&gt;
  &lt;action name=&quot;tmpAction&quot; class=&quot;my.actions.MyAction&quot;/&gt;
  &lt;tmpAction/&gt;
&lt;/article&gt;]]></var>
        <var name="example.output" value="tmpAction called successfully"/>
      </include>

    </var>
  </include>
</article>
