
<story path="/path/to/story" title="An interesting story">
<meta>
<property keyword="@" name="author" value="Mauro"/>
<property keyword="@" name="theme" value="testing"/>
</meta>
<narrative keyword="Narrative:">
<inOrderTo keyword="In order to">renovate my house</inOrderTo>
<asA keyword="As a">customer</asA>
<iWantTo keyword="I want to">get a loan</iWantTo>
</narrative>
<scenario keyword="Scenario:" title="I ask for a loan">   
<givenStories keyword="GivenStories:">
<givenStory>/given/story1</givenStory>
<givenStory>/given/story2</givenStory>
</givenStories>
<step outcome="successful">
Given I have a balance of $50
</step>
<step outcome="ignorable">
!-- A comment
</step>
<step outcome="successful">
When I request $20
</step>
<step outcome="successful">
When I ask Liz for a loan of $100
</step>
<step outcome="successful">
When I ask Liz for a loan of $<parameter>99</parameter>
</step>
<step outcome="successful">
When I write special chars &lt;&gt;&amp;&quot;
</step>
<step outcome="successful">
When I write special chars in parameter <parameter>&lt;&gt;&amp;&quot;</parameter>
</step>
<step outcome="successful">
When I write two parameters <parameter>,,,</parameter> and <parameter>&amp;&amp;&amp;</parameter>
</step>
<step outcome="hi">
Then I should... - try again
</step>
<step outcome="failed">
Then I should have a balance of $30
 <failure>java.lang.Exception: Expected &lt;30&gt; got &lt;25&gt;
	at org.jbehave.core.reporters.StoryNarrator.narrateAnInterestingStory(StoryNarrator.java:58)
	at org.jbehave.core.reporters.TemplateableOutputBehaviour.shouldReportEventsToXmlOutput(TemplateableOutputBehaviour.java:39)
	(reflection-invoke)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
...</failure></step>
<step outcome="notPerformed">
Then I should have $20
</step>
<step outcome="failed">
Then I don&apos;t return loan
 <failure>org.jbehave.core.model.OutcomesTable$OutcomesFailed
	at org.jbehave.core.model.OutcomesTable.verify(OutcomesTable.java:55)
	at org.jbehave.core.reporters.StoryNarrator.narrateAnInterestingStory(StoryNarrator.java:69)
	at org.jbehave.core.reporters.TemplateableOutputBehaviour.shouldReportEventsToXmlOutput(TemplateableOutputBehaviour.java:39)
	(reflection-invoke)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
...</failure><outcomes>
<fields>
<field>Description</field>
<field>Value</field>
<field>Matcher</field>
<field>Verified</field>
</fields>

<outcome>
<value>I don&apos;t return all</value><value>100</value><value>&lt;50.0&gt;</value><value>No</value>
</outcome>

<outcome>
<value>A wrong date</value><value>01/01/2011</value><value>&quot;02/01/2011&quot;</value><value>No</value>
</outcome>
</outcomes>
</step>
</scenario> 
<scenario keyword="Scenario:" title="Parametrised Scenario">   
<examples keyword="Examples:">
<step>Given money &lt;money&gt;</step>   
<step>Then I give it to &lt;to&gt;</step>   
<table>
<headers>
<header>money</header>
<header>to</header>
</headers>
<row>
<value>$30</value>
<value>Mauro</value>
</row>
<row>
<value>$50</value>
<value>Paul</value>
</row>
</table>
</examples>
<example keyword="Example:">{money=$30, to=Mauro}</example>
<step outcome="successful">
Given money $30
</step>
<step outcome="successful">
Then I give it to Mauro
</step>
<example keyword="Example:">{money=$50, to=Paul}</example>
<step outcome="successful">
Given money $50
</step>
<step outcome="successful">
Then I give it to Paul
</step>
<step outcome="failed">
Then I should have a balance of $30
 <failure>java.lang.Exception: Expected &lt;30&gt; got &lt;25&gt;
	at org.jbehave.core.reporters.StoryNarrator.narrateAnInterestingStory(StoryNarrator.java:84)
	at org.jbehave.core.reporters.TemplateableOutputBehaviour.shouldReportEventsToXmlOutput(TemplateableOutputBehaviour.java:39)
	(reflection-invoke)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
...</failure></step>
</scenario> 
<cancelled keyword="STORY CANCELLED" durationKeyword="DURATION" durationInSecs="2"/>
<pendingMethod>@When(&quot;something \&quot;$param\&quot;&quot;)
@Pending
public void whenSomething() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;something is &lt;param1&gt;&quot;)
@Pending
public void thenSomethingIsParam1() {
  // PENDING
}
</pendingMethod>
</story>

