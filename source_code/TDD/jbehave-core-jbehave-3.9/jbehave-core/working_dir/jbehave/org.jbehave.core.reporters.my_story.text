An interesting story
(/path/to/story)
Meta:
@author Mauro
@theme testing

DRY RUN
Narrative:
In order to renovate my house
As a customer
I want to get a loan
Scenario: I ask for a loan
GivenStories:
/given/story1 
/given/story2 

Given I have a balance of $50
!-- A comment
When I request $20
When I ask Liz for a loan of $100
When I ask Liz for a loan of $99
When I write special chars <>&"
When I write special chars in parameter <>&"
When I write two parameters ,,, and &&&
Then I should... - try again (hi)
STORY CANCELLED (DURATION 2 s)
Then I should have a balance of $30 (PENDING)
Then I should have $20 (NOT PERFORMED)
Then I don't return loan (FAILED)
(org.jbehave.core.model.OutcomesTable$OutcomesFailed)
|Description|Value|Matcher|Verified|
|I don't return all|100|<50.0>|No|
|A wrong date|01/01/2011|"02/01/2011"|No|

org.jbehave.core.model.OutcomesTable$OutcomesFailed
	at org.jbehave.core.model.OutcomesTable.verify(OutcomesTable.java:55)
	at org.jbehave.core.reporters.StoryNarrator.narrateAnInterestingStory(StoryNarrator.java:69)
	at org.jbehave.core.reporters.PrintStreamOutputBehaviour.shouldBuildPrintStreamReportersAndOverrideDefaultForAGivenFormat(PrintStreamOutputBehaviour.java:753)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1472)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:860)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1964)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:812)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2434)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:811)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)

Scenario: Parametrised Scenario
Examples:
Given money <money>
Then I give it to <to>

|money|to|
|$30|Mauro|
|$50|Paul|

Example: {money=$30, to=Mauro}
Given money $30
Then I give it to Mauro

Example: {money=$50, to=Paul}
Given money $50
Then I give it to Paul
Then I should have a balance of $30 (PENDING)


@When("something \"$param\"")
@Pending
public void whenSomething() {
  // PENDING
}

@Then("something is <param1>")
@Pending
public void thenSomethingIsParam1() {
  // PENDING
}


