/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.lavalamp.device;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import net.sf.lavalamp.device.DeviceProperties;
import net.sf.lavalamp.device.OnError;
import net.sf.lavalamp.properties.MissingPropertyException;
import net.sf.lavalamp.properties.Off;
import net.sf.lavalamp.site.BuildProperties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDeviceProperties {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      String string0 = deviceProperties0.toString();
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      OnError onError0 = deviceProperties0.getOnError();
      deviceProperties0.setOnError(onError0);
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      boolean boolean0 = deviceProperties0.isOnWhenSuccessful();
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      Off off0 = deviceProperties0.getOff();
      deviceProperties0.setOff(off0);
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
      assertEquals(false, deviceProperties0.isOnWhenSuccessful());
  }

  @Test
  public void test4()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      deviceProperties0.getPath();
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      deviceProperties0.getIdentity();
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      deviceProperties0.setOnWhenSuccessful(false);
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
      assertEquals(false, deviceProperties0.isOnWhenSuccessful());
  }

  @Test
  public void test7()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      deviceProperties0.getClassName();
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      deviceProperties0.setPath("@,70c'g8");
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=@,70c'g8null", deviceProperties0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      deviceProperties0.setIdentity("@,70c'g8");
      // Undeclared exception!
      try {
        deviceProperties0.check();
        fail("Expecting exception: MissingPropertyException");
      } catch(MissingPropertyException e) {
        /*
         * className must be specified in properties file
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      deviceProperties0.getBuildProperties();
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
      assertEquals(false, deviceProperties0.isOnWhenSuccessful());
  }

  @Test
  public void test11()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      // Undeclared exception!
      try {
        deviceProperties0.check();
        fail("Expecting exception: MissingPropertyException");
      } catch(MissingPropertyException e) {
        /*
         * identity must be specified in properties file
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DeviceProperties deviceProperties0 = new DeviceProperties();
      assertEquals("\n\tdevice=null, className=null,  off=[start=00:00, end=00:00], onError=BLINK, onWhenSuccessful=false, path=nullnull", deviceProperties0.toString());
      
      deviceProperties0.setClassName("kjoLoTm@9_QEo|nr");
      BuildProperties[] buildPropertiesArray0 = new BuildProperties[1];
      BuildProperties buildProperties0 = new BuildProperties();
      buildPropertiesArray0[0] = buildProperties0;
      deviceProperties0.setBuildProperties(buildPropertiesArray0);
      deviceProperties0.setIdentity("kjoLoTm@9_QEo|nr");
      buildProperties0.setBuild("kjoLoTm@9_QEo|nr");
      deviceProperties0.check();
      assertEquals(false, deviceProperties0.isOnWhenSuccessful());
  }
}
