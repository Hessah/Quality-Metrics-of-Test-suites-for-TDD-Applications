/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.lavalamp.device;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import net.sf.lavalamp.device.Period;
import net.sf.lavalamp.device.TimeOfDay;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestPeriod {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      Period period0 = new Period(timeOfDay0, timeOfDay0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1313, 1313, 1313, 1313, 1313, 1313);
      boolean boolean0 = period0.isInPeriod((Calendar) gregorianCalendar0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      TimeOfDay timeOfDay1 = new TimeOfDay(1313, 1313);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1313, 1313, 1313, 1313, 1313, 1313);
      Period period0 = new Period(timeOfDay0, timeOfDay1);
      boolean boolean0 = period0.isInPeriod((Calendar) gregorianCalendar0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1313, 1313);
      TimeOfDay timeOfDay1 = new TimeOfDay(1313, 0);
      Period period0 = new Period(timeOfDay0, timeOfDay1);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1313, 1313, 1313, 1313, 1313, 1313);
      boolean boolean0 = period0.isInPeriod((Calendar) gregorianCalendar0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1313, 1313, 1313, 1313, 1313, 1313);
      TimeOfDay timeOfDay1 = new TimeOfDay(0, 1313);
      Period period0 = new Period(timeOfDay1, timeOfDay0);
      boolean boolean0 = period0.isInPeriod((Calendar) gregorianCalendar0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      TimeOfDay timeOfDay1 = new TimeOfDay(1313, 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1313, 1313, 1313, 1313, 1313, 1313);
      Period period0 = new Period(timeOfDay1, timeOfDay0);
      boolean boolean0 = period0.isInPeriod((Calendar) gregorianCalendar0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      TimeOfDay timeOfDay1 = new TimeOfDay(1313, 1313);
      Period period0 = new Period(timeOfDay0, timeOfDay1);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1313, 0, 0);
      boolean boolean0 = period0.isInPeriod((Calendar) gregorianCalendar0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(1313, 1313, 1313, 1313, 1313, 1313);
      TimeOfDay timeOfDay1 = new TimeOfDay(0, 1313);
      Period period0 = new Period(timeOfDay0, timeOfDay1);
      boolean boolean0 = period0.isInPeriod((Calendar) gregorianCalendar0);
      assertEquals(false, boolean0);
  }
}
