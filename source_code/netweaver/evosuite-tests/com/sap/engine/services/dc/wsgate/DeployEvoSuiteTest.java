/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.engine.services.dc.wsgate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.engine.services.dc.wsgate.ArchiveFile;
import com.sap.engine.services.dc.wsgate.Deploy;
import com.sap.engine.services.dc.wsgate.Option;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DeployEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      ArchiveFile[] archiveFileArray0 = new ArchiveFile[4];
      deploy0.setArchiveFiles(archiveFileArray0);
      Deploy deploy1 = new Deploy();
      boolean boolean0 = deploy0.equals((Object) deploy1);
      assertFalse(deploy1.equals(deploy0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ArchiveFile[] archiveFileArray0 = new ArchiveFile[5];
      Option[] optionArray0 = new Option[4];
      Deploy deploy0 = new Deploy(archiveFileArray0, optionArray0);
      Deploy deploy1 = new Deploy();
      boolean boolean0 = deploy1.equals((Object) deploy0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      ArchiveFile archiveFile0 = new ArchiveFile();
      // Undeclared exception!
      try {
        deploy0.setArchiveFiles(0, archiveFile0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = Option.class;
      QName qName0 = new QName("java.`yext.dir", "java.`yext.dir", "java.`yext.dir");
      BeanSerializer beanSerializer0 = (BeanSerializer)Deploy.getSerializer("java.`yext.dir", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test4()  throws Throwable  {
      ArchiveFile[] archiveFileArray0 = new ArchiveFile[9];
      Option[] optionArray0 = new Option[3];
      Option option0 = new Option();
      Deploy deploy0 = new Deploy(archiveFileArray0, optionArray0);
      // Undeclared exception!
      try {
        deploy0.setOptions(4, option0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 4
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      // Undeclared exception!
      try {
        deploy0.getArchiveFiles((int) (byte) (-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      // Undeclared exception!
      try {
        deploy0.getOptions(1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ArchiveFile[] archiveFileArray0 = new ArchiveFile[5];
      Option[] optionArray0 = new Option[4];
      Deploy deploy0 = new Deploy(archiveFileArray0, optionArray0);
      Deploy deploy1 = new Deploy(archiveFileArray0, optionArray0);
      boolean boolean0 = deploy0.equals((Object) deploy1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      QName qName0 = new QName("T", "T");
      Class<?> class0 = Object.class;
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)Deploy.getDeserializer("T", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test9()  throws Throwable  {
      TypeDesc typeDesc0 = Deploy.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test10()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      boolean boolean0 = deploy0.equals((Object) "java.`yext.dir");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      Deploy deploy1 = new Deploy();
      boolean boolean0 = deploy0.equals((Object) deploy1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Option[] optionArray0 = new Option[8];
      Deploy deploy0 = new Deploy();
      Deploy deploy1 = new Deploy();
      assertTrue(deploy1.equals(deploy0));
      
      deploy1.setOptions(optionArray0);
      boolean boolean0 = deploy0.equals((Object) deploy1);
      assertFalse(deploy1.equals(deploy0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      Deploy deploy1 = new Deploy();
      assertTrue(deploy1.equals(deploy0));
      
      Option[] optionArray0 = new Option[3];
      deploy0.setOptions(optionArray0);
      boolean boolean0 = deploy0.equals((Object) deploy1);
      assertFalse(deploy0.equals(deploy1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Deploy deploy0 = new Deploy();
      int int0 = deploy0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      ArchiveFile[] archiveFileArray0 = new ArchiveFile[9];
      ArchiveFile archiveFile0 = new ArchiveFile();
      Option[] optionArray0 = new Option[3];
      archiveFileArray0[0] = archiveFile0;
      Deploy deploy0 = new Deploy(archiveFileArray0, optionArray0);
      int int0 = deploy0.hashCode();
      assertEquals(2, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      ArchiveFile[] archiveFileArray0 = new ArchiveFile[9];
      Option[] optionArray0 = new Option[3];
      Option option0 = new Option();
      optionArray0[2] = option0;
      Deploy deploy0 = new Deploy(archiveFileArray0, optionArray0);
      int int0 = deploy0.hashCode();
      assertEquals(2, int0);
  }
}
