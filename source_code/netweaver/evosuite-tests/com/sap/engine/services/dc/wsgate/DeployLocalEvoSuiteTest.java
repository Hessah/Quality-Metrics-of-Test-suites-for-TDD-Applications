/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.engine.services.dc.wsgate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.engine.services.dc.wsgate.DeployLocal;
import com.sap.engine.services.dc.wsgate.Option;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DeployLocalEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = DeployLocal.class;
      QName qName0 = new QName("u;RJKC'<;'", "u;RJKC'<;'");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)DeployLocal.getDeserializer("u;RJKC'<;'", (Class) class0, qName0);
      assertEquals(false, beanDeserializer0.componentsReady());
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = Option.class;
      BeanSerializer beanSerializer0 = (BeanSerializer)DeployLocal.getSerializer((String) null, (Class) class0, (QName) null);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test2()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      DeployLocal deployLocal1 = new DeployLocal();
      boolean boolean0 = deployLocal0.equals((Object) deployLocal1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Option[] optionArray0 = new Option[5];
      DeployLocal deployLocal0 = new DeployLocal(stringArray0, optionArray0);
      deployLocal0.setOptions(optionArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      // Undeclared exception!
      try {
        deployLocal0.setArchivePaths((-12), "I%EdF((Xer>7}G");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      // Undeclared exception!
      try {
        deployLocal0.getArchivePaths(42);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      Option option0 = new Option();
      // Undeclared exception!
      try {
        deployLocal0.setOptions(68, option0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Option[] optionArray0 = new Option[5];
      DeployLocal deployLocal0 = new DeployLocal(stringArray0, optionArray0);
      // Undeclared exception!
      try {
        deployLocal0.getOptions((-1392250032));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1392250032
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      String[] stringArray0 = new String[7];
      deployLocal0.setArchivePaths(stringArray0);
      Option[] optionArray0 = new Option[10];
      DeployLocal deployLocal1 = new DeployLocal(stringArray0, optionArray0);
      boolean boolean0 = deployLocal0.equals((Object) deployLocal1);
      assertFalse(deployLocal1.equals(deployLocal0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TypeDesc typeDesc0 = DeployLocal.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test10()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      boolean boolean0 = deployLocal0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      String[] stringArray0 = new String[7];
      Option[] optionArray0 = new Option[10];
      DeployLocal deployLocal1 = new DeployLocal(stringArray0, optionArray0);
      boolean boolean0 = deployLocal0.equals((Object) deployLocal1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      String[] stringArray0 = new String[4];
      deployLocal0.setArchivePaths(stringArray0);
      DeployLocal deployLocal1 = new DeployLocal();
      boolean boolean0 = deployLocal0.equals((Object) deployLocal1);
      assertFalse(deployLocal1.equals(deployLocal0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Option[] optionArray0 = new Option[16];
      DeployLocal deployLocal0 = new DeployLocal((String[]) null, optionArray0);
      DeployLocal deployLocal1 = new DeployLocal((String[]) null, optionArray0);
      boolean boolean0 = deployLocal0.equals((Object) deployLocal1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      Option[] optionArray0 = new Option[51];
      DeployLocal deployLocal1 = new DeployLocal((String[]) null, optionArray0);
      boolean boolean0 = deployLocal1.equals((Object) deployLocal0);
      assertEquals(false, boolean0);
      assertFalse(deployLocal0.equals(deployLocal1));
  }

  @Test
  public void test15()  throws Throwable  {
      DeployLocal deployLocal0 = new DeployLocal();
      int int0 = deployLocal0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Option[] optionArray0 = new Option[5];
      DeployLocal deployLocal0 = new DeployLocal(stringArray0, optionArray0);
      Option option0 = new Option((Object) deployLocal0, (Object) deployLocal0);
      optionArray0[1] = option0;
      int int0 = deployLocal0.hashCode();
      assertEquals(2, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "N-~V,/=?rtd,zM[E[";
      Option[] optionArray0 = new Option[5];
      DeployLocal deployLocal0 = new DeployLocal(stringArray0, optionArray0);
      int int0 = deployLocal0.hashCode();
      assertEquals((-1392250033), int0);
  }
}
