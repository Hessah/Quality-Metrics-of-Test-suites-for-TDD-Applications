/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.engine.services.dc.wsgate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.engine.services.dc.wsgate.DeployWSPortType;
import com.sap.engine.services.dc.wsgate.DeployWSServiceLocator;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.xml.namespace.QName;
import javax.xml.rpc.ServiceException;
import org.apache.axis.EngineConfiguration;
import org.apache.axis.configuration.NullProvider;
import org.apache.axis.schema.SchemaVersion2001;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.xml.sax.ErrorHandler;

@RunWith(EvoSuiteRunner.class)
public class DeployWSServiceLocatorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          deployWSServiceLocator0.getDeployWSPortAddress();
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          assertEquals("DeployWSPort", deployWSServiceLocator0.getDeployWSPortWSDDServiceName());
          
          deployWSServiceLocator0.setDeployWSPortWSDDServiceName("$,d}o7Sr");
          assertEquals("http://10.66.212.71:50000/DeployWSService/DeployWS", deployWSServiceLocator0.getDeployWSPortAddress());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      NullProvider nullProvider0 = new NullProvider();
      DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator((EngineConfiguration) nullProvider0);
      QName qName0 = SchemaVersion2001.QNAME_NIL;
      Class<?> class0 = DeployWSPortType.class;
      try {
        deployWSServiceLocator0.getPort(qName0, (Class) class0);
        fail("Expecting exception: ServiceException");
      } catch(ServiceException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          deployWSServiceLocator0.getDeployWSPort();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          QName qName0 = deployWSServiceLocator0.getServiceName();
          Class<?> class0 = DeployWSServiceLocator.class;
          try {
            deployWSServiceLocator0.getPort(qName0, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  com.sap.engine.services.dc.wsgate.DeployWSServiceLocator
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          QName qName0 = deployWSServiceLocator0.getServiceName();
          try {
            deployWSServiceLocator0.setEndpointAddress(qName0, "f-vlARIe");
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             *  Cannot set Endpoint Address for Unknown PortDeployWSService
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          deployWSServiceLocator0.setEndpointAddress("DeployWSPort", "DeployWSPort");
          assertEquals("DeployWSPort", deployWSServiceLocator0.getDeployWSPortAddress());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          Class<?> class0 = ErrorHandler.class;
          try {
            deployWSServiceLocator0.getPort((QName) null, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  org.xml.sax.ErrorHandler
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          DeployWSServiceLocator deployWSServiceLocator0 = new DeployWSServiceLocator();
          Iterator<Object> iterator0 = deployWSServiceLocator0.getPorts();
          assertNotNull(iterator0);
          
          Iterator<Object> iterator1 = deployWSServiceLocator0.getPorts();
          assertEquals(true, iterator1.hasNext());
          assertEquals("http://10.66.212.71:50000/DeployWSService/DeployWS", deployWSServiceLocator0.getDeployWSPortAddress());
          assertEquals("DeployWSPort", deployWSServiceLocator0.getDeployWSPortWSDDServiceName());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
