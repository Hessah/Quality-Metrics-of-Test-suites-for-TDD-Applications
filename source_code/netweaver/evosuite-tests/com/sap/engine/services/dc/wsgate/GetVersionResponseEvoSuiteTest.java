/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.engine.services.dc.wsgate;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.engine.services.dc.wsgate.GetVersionResponse;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GetVersionResponseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GetVersionResponse getVersionResponse0 = new GetVersionResponse();
      getVersionResponse0.set_return("lYR${ne)zZ=zr'");
      int int0 = getVersionResponse0.hashCode();
      assertEquals((-86590231), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      TypeDesc typeDesc0 = GetVersionResponse.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = new QName("Z/W<xN+ /bn4X", "Z/W<xN+ /bn4X");
      BeanSerializer beanSerializer0 = (BeanSerializer)GetVersionResponse.getSerializer("Z/W<xN+ /bn4X", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = new QName("Z/W<xN+ /bn4X", "Z/W<xN+ /bn4X");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)GetVersionResponse.getDeserializer("Z/W<xN+ /bn4X", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test4()  throws Throwable  {
      GetVersionResponse getVersionResponse0 = new GetVersionResponse();
      GetVersionResponse getVersionResponse1 = new GetVersionResponse();
      boolean boolean0 = getVersionResponse0.equals((Object) getVersionResponse1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      GetVersionResponse getVersionResponse0 = new GetVersionResponse();
      boolean boolean0 = getVersionResponse0.equals((Object) "Z/W<xN+ /bn4X");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      GetVersionResponse getVersionResponse0 = new GetVersionResponse();
      GetVersionResponse getVersionResponse1 = new GetVersionResponse("Z/W<xN+ /bn4X");
      boolean boolean0 = getVersionResponse0.equals((Object) getVersionResponse1);
      assertFalse(getVersionResponse1.equals(getVersionResponse0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      GetVersionResponse getVersionResponse0 = new GetVersionResponse();
      GetVersionResponse getVersionResponse1 = new GetVersionResponse("lYR$C{ne)zZ=zr'");
      boolean boolean0 = getVersionResponse1.equals((Object) getVersionResponse0);
      assertFalse(getVersionResponse0.equals(getVersionResponse1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      GetVersionResponse getVersionResponse0 = new GetVersionResponse("lYR$C{ne)zZ=zr'");
      GetVersionResponse getVersionResponse1 = new GetVersionResponse("lYR$C{ne)zZ=zr'");
      boolean boolean0 = getVersionResponse0.equals((Object) getVersionResponse1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      GetVersionResponse getVersionResponse0 = new GetVersionResponse();
      int int0 = getVersionResponse0.hashCode();
      assertEquals(1, int0);
  }
}
