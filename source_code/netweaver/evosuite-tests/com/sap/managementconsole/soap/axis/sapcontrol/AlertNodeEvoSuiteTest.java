/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.AlertNode;
import com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR;
import com.sap.managementconsole.soap.axis.sapcontrol.VISIBLELEVEL;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AlertNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      alertNode0.setTime("=");
      AlertNode alertNode1 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(0, alertNode0.getParent());
      assertFalse(alertNode1.equals(alertNode0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = AlertNode.class;
      QName qName0 = new QName("ofU[-_g9", "ofU[-_g9");
      BeanSerializer beanSerializer0 = (BeanSerializer)AlertNode.getSerializer("ofU[-_g9", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = Class.class;
      QName qName0 = new QName("", "", "");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)AlertNode.getDeserializer("", (Class) class0, qName0);
      assertEquals(false, beanDeserializer0.componentsReady());
  }

  @Test
  public void test4()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value1;
      alertNode0.setActualValue(sTATECOLOR0);
      AlertNode alertNode1 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertFalse(alertNode1.equals(alertNode0));
      assertEquals(false, boolean0);
      assertEquals(0, alertNode0.getParent());
  }

  @Test
  public void test5()  throws Throwable  {
      TypeDesc typeDesc0 = AlertNode.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test6()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      STATECOLOR sTATECOLOR0 = STATECOLOR.value3;
      alertNode0.setHighAlertValue(sTATECOLOR0);
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertFalse(alertNode0.equals(alertNode1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      alertNode0.setName("");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertFalse(alertNode1.equals(alertNode0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value3;
      AlertNode alertNode1 = new AlertNode("parent", (-5), sTATECOLOR0, "parent", "parent", "parent", (VISIBLELEVEL) null, sTATECOLOR0, "parent", "parent", "parent");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(-5, alertNode1.getParent());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value1;
      alertNode0.setName("");
      AlertNode alertNode1 = new AlertNode("", (-1367), sTATECOLOR0, "", "", "", (VISIBLELEVEL) null, sTATECOLOR0, "", "", "");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(false, boolean0);
      assertEquals(-1367, alertNode1.getParent());
  }

  @Test
  public void test11()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value3;
      alertNode0.setName("Ysl>LoDZ/UqM_C");
      alertNode0.setParent(3);
      AlertNode alertNode1 = new AlertNode("Ysl>LoDZ/UqM_C", 3, sTATECOLOR0, "Ysl>LoDZ/UqM_C", "Ysl>LoDZ/UqM_C", "Ysl>LoDZ/UqM_C", (VISIBLELEVEL) null, sTATECOLOR0, "Ysl>LoDZ/UqM_C", "Ysl>LoDZ/UqM_C", "Ysl>LoDZ/UqM_C");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(3, alertNode0.getParent());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value1;
      alertNode0.setActualValue(sTATECOLOR0);
      alertNode0.setName("");
      alertNode0.setParent((-1367));
      AlertNode alertNode1 = new AlertNode("", (-1367), sTATECOLOR0, "", "", "", (VISIBLELEVEL) null, sTATECOLOR0, "", "", "");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(-1367, alertNode0.getParent());
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value1;
      alertNode0.setActualValue(sTATECOLOR0);
      alertNode0.setName("");
      alertNode0.setParent((-1367));
      AlertNode alertNode1 = new AlertNode("", (-1367), sTATECOLOR0, "", "", "", (VISIBLELEVEL) null, sTATECOLOR0, "", "", "");
      alertNode0.setDescription("");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(-1367, alertNode0.getParent());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      alertNode0.setDescription("8>6");
      AlertNode alertNode1 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(0, alertNode1.getParent());
      assertFalse(alertNode1.equals(alertNode0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      STATECOLOR sTATECOLOR0 = STATECOLOR.value3;
      VISIBLELEVEL vISIBLELEVEL0 = VISIBLELEVEL.value3;
      AlertNode alertNode0 = new AlertNode("", 118, sTATECOLOR0, "", "", "", vISIBLELEVEL0, sTATECOLOR0, "", "", "");
      AlertNode alertNode1 = new AlertNode("", 118, sTATECOLOR0, "", "", "", vISIBLELEVEL0, sTATECOLOR0, "", "", "");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(118, alertNode1.getParent());
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      alertNode1.setAnalyseTool("\"N@I@");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      alertNode1.setAnalyseTool(")H2>9Z;AN'W5.U#");
      boolean boolean0 = alertNode1.equals((Object) alertNode0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      VISIBLELEVEL vISIBLELEVEL0 = VISIBLELEVEL.value2;
      alertNode1.setVisibleLevel(vISIBLELEVEL0);
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      VISIBLELEVEL vISIBLELEVEL0 = VISIBLELEVEL.value2;
      alertNode0.setVisibleLevel(vISIBLELEVEL0);
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertFalse(alertNode0.equals(alertNode1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      alertNode1.setHighAlertValue(sTATECOLOR0);
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      alertNode1.setAlDescription("");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      alertNode0.setAlDescription("\"N@I@");
      AlertNode alertNode1 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(0, alertNode0.getParent());
      assertFalse(alertNode1.equals(alertNode0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      alertNode1.setAlTime("[LOOKUP] Proerties ,ile aT '");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      alertNode0.setAlTime("GP");
      AlertNode alertNode1 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertFalse(alertNode1.equals(alertNode0));
      assertEquals(0, alertNode1.getParent());
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      AlertNode alertNode1 = new AlertNode();
      assertTrue(alertNode1.equals(alertNode0));
      
      alertNode1.setTid("");
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      alertNode0.setTid("");
      AlertNode alertNode1 = new AlertNode();
      boolean boolean0 = alertNode0.equals((Object) alertNode1);
      assertEquals(0, alertNode1.getParent());
      assertFalse(alertNode1.equals(alertNode0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      AlertNode alertNode0 = new AlertNode();
      int int0 = alertNode0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      VISIBLELEVEL vISIBLELEVEL0 = VISIBLELEVEL.value1;
      AlertNode alertNode0 = new AlertNode("CJ)a~0QI97>h!;$U#J", (-8), sTATECOLOR0, "CJ)a~0QI97>h!;$U#J", "CJ)a~0QI97>h!;$U#J", "CJ)a~0QI97>h!;$U#J", vISIBLELEVEL0, sTATECOLOR0, "CJ)a~0QI97>h!;$U#J", "CJ)a~0QI97>h!;$U#J", "CJ)a~0QI97>h!;$U#J");
      int int0 = alertNode0.hashCode();
      assertEquals((-1917227676), int0);
  }
}
