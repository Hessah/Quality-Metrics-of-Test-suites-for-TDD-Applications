/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.DirEntry;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DirEntryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = Class.class;
      QName qName0 = new QName("pFV12h;oQ(9Yf5z");
      BeanSerializer beanSerializer0 = (BeanSerializer)DirEntry.getSerializer("pFV12h;oQ(9Yf5z", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test1()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry("K<4gy/(ggD!H bS", (-16L), "K<4gy/(ggD!H bS");
      int int0 = dirEntry0.hashCode();
      assertEquals(2041387832, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      dirEntry0.setSize((-1053L));
      DirEntry dirEntry1 = new DirEntry();
      boolean boolean0 = dirEntry0.equals((Object) dirEntry1);
      assertEquals((-1053L), dirEntry0.getSize());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = Class.class;
      QName qName0 = new QName("pFV12h;oQ(9Yf5z");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)DirEntry.getDeserializer("pFV12h;oQ(9Yf5z", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test4()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      dirEntry0.setFilename("pFV12h;oQ(9Yf5z");
      assertEquals("pFV12h;oQ(9Yf5z", dirEntry0.getFilename());
  }

  @Test
  public void test5()  throws Throwable  {
      TypeDesc typeDesc0 = DirEntry.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test6()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      boolean boolean0 = dirEntry0.equals((Object) "pFV12h;oQ(9Yf5z");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry("K<4gy/(ggD!H bS", (-16L), "K<4gy/(ggD!H bS");
      DirEntry dirEntry1 = new DirEntry();
      boolean boolean0 = dirEntry1.equals((Object) dirEntry0);
      assertEquals(false, boolean0);
      assertEquals((-16L), dirEntry0.getSize());
  }

  @Test
  public void test8()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      DirEntry dirEntry1 = new DirEntry("ALML", (-10L), "ALML");
      boolean boolean0 = dirEntry1.equals((Object) dirEntry0);
      assertFalse(dirEntry0.equals(dirEntry1));
      assertEquals(false, boolean0);
      assertEquals((-10L), dirEntry1.getSize());
  }

  @Test
  public void test9()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      DirEntry dirEntry1 = new DirEntry();
      boolean boolean0 = dirEntry0.equals((Object) dirEntry1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry("ALML", (-10L), "ALML");
      DirEntry dirEntry1 = new DirEntry("ALML", (-10L), "ALML");
      boolean boolean0 = dirEntry0.equals((Object) dirEntry1);
      assertEquals((-10L), dirEntry0.getSize());
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      DirEntry dirEntry1 = new DirEntry();
      assertTrue(dirEntry1.equals(dirEntry0));
      
      dirEntry1.setModtime("K<4gy/(ggD!H bS");
      boolean boolean0 = dirEntry0.equals((Object) dirEntry1);
      assertFalse(dirEntry1.equals(dirEntry0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      DirEntry dirEntry1 = new DirEntry();
      assertTrue(dirEntry1.equals(dirEntry0));
      
      dirEntry0.setModtime("zb|+");
      boolean boolean0 = dirEntry0.equals((Object) dirEntry1);
      assertFalse(dirEntry1.equals(dirEntry0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DirEntry dirEntry0 = new DirEntry();
      int int0 = dirEntry0.hashCode();
      assertEquals(1, int0);
  }
}
