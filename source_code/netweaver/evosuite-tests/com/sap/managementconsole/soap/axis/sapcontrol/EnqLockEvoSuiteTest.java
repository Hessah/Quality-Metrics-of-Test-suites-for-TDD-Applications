/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.EnqLock;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EnqLockEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock("ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", 1, 1, "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", false);
      enqLock0.setUseCountOwner(1);
      assertEquals(1, enqLock0.getUseCountOwnerVb());
      assertEquals(false, enqLock0.isBackup());
      assertEquals(1, enqLock0.getUseCountOwner());
  }

  @Test
  public void test2()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      enqLock0.setUseCountOwnerVb((-1078));
      assertEquals(-1078, enqLock0.getUseCountOwnerVb());
  }

  @Test
  public void test3()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      enqLock0.setOwnerVb("RQOYCD.GUvw`");
      EnqLock enqLock1 = new EnqLock();
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertFalse(enqLock1.equals(enqLock0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      enqLock0.setClient("");
      EnqLock enqLock1 = new EnqLock();
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(0, enqLock1.getUseCountOwnerVb());
      assertFalse(enqLock1.equals(enqLock0));
      assertEquals(0, enqLock1.getUseCountOwner());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = Class.class;
      QName qName0 = new QName("log4j.defaultInitOverride", "log4j.defaultInitOverride", "log4j.defaultInitOverride");
      BeanSerializer beanSerializer0 = (BeanSerializer)EnqLock.getSerializer("log4j.defaultInitOverride", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test6()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      enqLock0.setTransaction("log4j.defaultInitOverride");
      EnqLock enqLock1 = new EnqLock();
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(0, enqLock0.getUseCountOwner());
      assertFalse(enqLock1.equals(enqLock0));
      assertEquals(0, enqLock0.getUseCountOwnerVb());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock("ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", 1, 1, "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", "ViM[y'sr^GL-N\"", false);
      enqLock0.setLockName("ViM[y'sr^GL-N\"");
      assertEquals(false, enqLock0.isBackup());
      assertEquals(1, enqLock0.getUseCountOwner());
      assertEquals(1, enqLock0.getUseCountOwnerVb());
  }

  @Test
  public void test8()  throws Throwable  {
      TypeDesc typeDesc0 = EnqLock.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test9()  throws Throwable  {
      Class<?> class0 = EnqLock.class;
      QName qName0 = QName.valueOf("'.)");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)EnqLock.getDeserializer("'.)", (Class) class0, qName0);
      assertEquals(false, beanDeserializer0.componentsReady());
  }

  @Test
  public void test10()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      enqLock0.setBackup(true);
      assertEquals(true, enqLock0.isBackup());
  }

  @Test
  public void test11()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      boolean boolean0 = enqLock0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock("", "", "", "", "", 0, 0, "", "", "", "", false);
      EnqLock enqLock1 = new EnqLock("", "", "", "", "", 0, 0, "", "", "", "", true);
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(true, enqLock1.isBackup());
      assertEquals(0, enqLock0.getUseCountOwnerVb());
      assertEquals(false, boolean0);
      assertEquals(0, enqLock0.getUseCountOwner());
  }

  @Test
  public void test13()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock("", "", "", "", "", 0, 0, "", "", "", "", false);
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(0, enqLock1.getUseCountOwner());
      assertEquals(false, boolean0);
      assertEquals(false, enqLock1.isBackup());
      assertEquals(0, enqLock1.getUseCountOwnerVb());
  }

  @Test
  public void test14()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock("s", "s", "s", "s", "s", 110, 110, "s", "s", "s", "s", false);
      boolean boolean0 = enqLock1.equals((Object) enqLock0);
      assertEquals(110, enqLock1.getUseCountOwnerVb());
      assertEquals(false, boolean0);
      assertEquals(false, enqLock1.isBackup());
      assertEquals(110, enqLock1.getUseCountOwner());
  }

  @Test
  public void test15()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock1.setLockArg("e");
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertFalse(enqLock1.equals(enqLock0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock("s", "s", "s", "s", "s", 110, 110, "s", "s", "s", "s", false);
      EnqLock enqLock1 = new EnqLock("s", (String) null, (String) null, (String) null, (String) null, 110, 110, (String) null, "s", "s", (String) null, false);
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(110, enqLock0.getUseCountOwner());
      assertEquals(false, enqLock0.isBackup());
      assertEquals(false, boolean0);
      assertFalse(enqLock1.equals(enqLock0));
      assertEquals(110, enqLock0.getUseCountOwnerVb());
  }

  @Test
  public void test17()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock("", "", "", "", "", 17, 17, "", "", "", "", true);
      enqLock0.setLockMode((String) null);
      EnqLock enqLock1 = new EnqLock("", "", "", "", "", 17, 17, "", "", "", "", true);
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(17, enqLock0.getUseCountOwnerVb());
      assertFalse(enqLock1.equals(enqLock0));
      assertEquals(false, boolean0);
      assertEquals(17, enqLock0.getUseCountOwner());
      assertEquals(true, enqLock0.isBackup());
  }

  @Test
  public void test18()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock((String) null, (String) null, "&>9hh-HpC^XW[n]MfgD", (String) null, (String) null, 1972, 1972, (String) null, (String) null, "&>9hh-HpC^XW[n]MfgD", "&>9hh-HpC^XW[n]MfgD", true);
      EnqLock enqLock1 = new EnqLock();
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(false, boolean0);
      assertEquals(1972, enqLock0.getUseCountOwnerVb());
      assertEquals(1972, enqLock0.getUseCountOwner());
      assertEquals(true, enqLock0.isBackup());
  }

  @Test
  public void test19()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock0.setOwner("EebV=");
      boolean boolean0 = enqLock1.equals((Object) enqLock0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock("d+J%", "d+J%", "d+J%", "d+J%", "d+J%", (-271), (-271), "d+J%", "d+J%", "d+J%", "d+J%", false);
      EnqLock enqLock1 = new EnqLock("d+J%", "d+J%", "d+J%", "d+J%", "d+J%", (-271), (-271), "d+J%", "d+J%", "d+J%", "d+J%", false);
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock1.setOwner("2jYSX|LJ{");
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock((String) null, (String) null, (String) null, (String) null, "pX/2", (-1078), (-1078), "pX/2", "pX/2", "pX/2", "pX/2", true);
      enqLock0.equals((Object) enqLock1);
      assertEquals(true, enqLock1.isBackup());
      assertEquals(-1078, enqLock1.getUseCountOwnerVb());
      assertEquals(-1078, enqLock1.getUseCountOwner());
  }

  @Test
  public void test22()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock((String) null, (String) null, (String) null, (String) null, (String) null, 1259, 1259, (String) null, (String) null, (String) null, (String) null, false);
      EnqLock enqLock1 = new EnqLock();
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(false, enqLock0.isBackup());
      assertEquals(1259, enqLock0.getUseCountOwnerVb());
      assertEquals(1259, enqLock0.getUseCountOwner());
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock((String) null, (String) null, (String) null, (String) null, (String) null, 0, 1360, (String) null, (String) null, (String) null, (String) null, true);
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(false, boolean0);
      assertEquals(0, enqLock1.getUseCountOwner());
      assertEquals(1360, enqLock1.getUseCountOwnerVb());
      assertEquals(true, enqLock1.isBackup());
  }

  @Test
  public void test24()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock1.setUser("'.)");
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock0.setUser("e");
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertFalse(enqLock0.equals(enqLock1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock1.setTransaction("");
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock1.setObject("'.)");
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      EnqLock enqLock1 = new EnqLock();
      assertTrue(enqLock1.equals(enqLock0));
      
      enqLock0.setObject("");
      boolean boolean0 = enqLock0.equals((Object) enqLock1);
      assertFalse(enqLock0.equals(enqLock1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock();
      int int0 = enqLock0.hashCode();
      assertEquals(1238, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      EnqLock enqLock0 = new EnqLock("", "", "", "", "", 17, 17, "", "", "", "", true);
      int int0 = enqLock0.hashCode();
      assertEquals(1266, int0);
      assertEquals(true, enqLock0.isBackup());
  }
}
