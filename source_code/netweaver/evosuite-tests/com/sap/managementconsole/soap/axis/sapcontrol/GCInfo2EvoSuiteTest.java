/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2;
import com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GCInfo2EvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setUnloadedClasses((-1805));
      assertEquals(-1805, gCInfo2_0.getUnloadedClasses());
  }

  @Test
  public void test1()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      GCInfo2 gCInfo2_1 = new GCInfo2();
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      GCInfo2 gCInfo2_0 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", (-1951), (-1951), (long) (-1951), 0L, (long) (-1951), 0L, (long) (-1951), (long) (-1951), 0L, (-1951), 0L, sTATECOLOR0);
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", (-1951), (-1951), 0L, (long) 0, (long) (-1951), (long) 0, 0L, (long) 0, 0L, (-1951), (long) 0, sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals((-1951L), gCInfo2_1.getObjBytesFreed());
      assertEquals(-1951, gCInfo2_1.getDuration());
      assertEquals(0L, gCInfo2_0.getClsBytesBefore());
      assertEquals(-1951, gCInfo2_1.getUnloadedClasses());
      assertEquals(0L, gCInfo2_1.getClsBytesFreed());
      assertEquals(-1951, gCInfo2_1.getCpuTime());
      assertEquals(0L, gCInfo2_0.getPageFaults());
      assertEquals(0L, gCInfo2_1.getObjBytesBefore());
      assertEquals((-1951L), gCInfo2_0.getClsBytesFreed());
      assertEquals(false, boolean0);
      assertEquals(0L, gCInfo2_0.getHeapSize());
      assertEquals((-1951L), gCInfo2_0.getObjBytesBefore());
      assertEquals(0L, gCInfo2_0.getObjBytesAfter());
      assertEquals((-1951L), gCInfo2_0.getClsBytesAfter());
      assertEquals(0L, gCInfo2_1.getClsBytesAfter());
  }

  @Test
  public void test3()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setCpuTime(47);
      GCInfo2 gCInfo2_1 = new GCInfo2((String) null, (String) null, (String) null, (String) null, 0, 0, (long) 47, (long) 0, (long) 0, (long) 47, (long) 0, (long) 1, (long) 47, 0, (long) 47, (STATECOLOR) null);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(47, gCInfo2_0.getCpuTime());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setStartTime("DRJ(vYR(");
      int int0 = gCInfo2_0.hashCode();
      assertEquals(171977766, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setType("DRJ(vYR(");
      int int0 = gCInfo2_0.hashCode();
      assertEquals(171977766, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setDuration((-1947));
      assertEquals(-1947, gCInfo2_0.getDuration());
  }

  @Test
  public void test7()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setClsBytesBefore((long) 373);
      assertEquals(373L, gCInfo2_0.getClsBytesBefore());
  }

  @Test
  public void test8()  throws Throwable  {
      Class<?> class0 = Object.class;
      QName qName0 = new QName("", "");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)GCInfo2.getDeserializer("", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test9()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setClsBytesAfter(60000L);
      GCInfo2 gCInfo2_1 = new GCInfo2();
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(60000L, gCInfo2_0.getClsBytesAfter());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setClsBytesFreed((long) (-1432415818));
      assertEquals((-1432415818L), gCInfo2_0.getClsBytesFreed());
  }

  @Test
  public void test11()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value2;
      gCInfo2_0.setDispstatus(sTATECOLOR0);
      GCInfo2 gCInfo2_1 = new GCInfo2();
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(0, gCInfo2_1.getDuration());
      assertEquals(0, gCInfo2_1.getCpuTime());
      assertFalse(gCInfo2_1.equals(gCInfo2_0));
      assertEquals(0, gCInfo2_1.getUnloadedClasses());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = new QName("8");
      BeanSerializer beanSerializer0 = (BeanSerializer)GCInfo2.getSerializer("8", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test13()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setReason("DRJ(vYR(");
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      gCInfo2_0.setType("DRJ(vYR(");
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", (-1951), (-1951), (long) (-1951), 0L, (long) (-1951), 0L, (long) (-1951), (long) (-1951), 0L, (-1951), 0L, sTATECOLOR0);
      boolean boolean0 = gCInfo2_1.equals((Object) gCInfo2_0);
      assertEquals(-1951, gCInfo2_1.getDuration());
      assertEquals((-1951L), gCInfo2_1.getClsBytesFreed());
      assertEquals(false, boolean0);
      assertEquals(0L, gCInfo2_1.getObjBytesAfter());
      assertEquals((-1951L), gCInfo2_1.getClsBytesAfter());
      assertEquals(0L, gCInfo2_1.getClsBytesBefore());
      assertEquals(0L, gCInfo2_1.getHeapSize());
      assertEquals(-1951, gCInfo2_1.getCpuTime());
      assertEquals(0L, gCInfo2_1.getPageFaults());
      assertEquals((-1951L), gCInfo2_1.getObjBytesFreed());
      assertEquals(-1951, gCInfo2_1.getUnloadedClasses());
      assertEquals((-1951L), gCInfo2_1.getObjBytesBefore());
  }

  @Test
  public void test14()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", 0, 0, (long) 0, (long) 0, 0L, (long) 0, 0L, (long) (-1951), (long) (-1951), 0, (long) 0, sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(0L, gCInfo2_1.getClsBytesAfter());
      assertEquals(0, gCInfo2_1.getUnloadedClasses());
      assertEquals(false, boolean0);
      assertEquals((-1951L), gCInfo2_1.getClsBytesFreed());
      assertEquals((-1951L), gCInfo2_1.getHeapSize());
      assertEquals(0L, gCInfo2_1.getClsBytesBefore());
      assertEquals(0L, gCInfo2_1.getObjBytesFreed());
      assertEquals(0, gCInfo2_1.getDuration());
      assertEquals(0, gCInfo2_1.getCpuTime());
      assertEquals(0L, gCInfo2_1.getPageFaults());
      assertEquals(0L, gCInfo2_1.getObjBytesBefore());
      assertEquals(0L, gCInfo2_1.getObjBytesAfter());
  }

  @Test
  public void test15()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setObjBytesBefore(0L);
      assertEquals(0L, gCInfo2_0.getClsBytesFreed());
  }

  @Test
  public void test16()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setHeapSize((long) (-1947));
      assertEquals((-1947L), gCInfo2_0.getHeapSize());
  }

  @Test
  public void test17()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setPageFaults(0L);
      assertEquals(0L, gCInfo2_0.getObjBytesAfter());
  }

  @Test
  public void test18()  throws Throwable  {
      TypeDesc typeDesc0 = GCInfo2.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test19()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      boolean boolean0 = gCInfo2_0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      GCInfo2 gCInfo2_1 = new GCInfo2("DR]J(vYR(", "DR]J(vYR(", "DR]J(vYR(", "DR]J(vYR(", (-1947), (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (-1947), (long) (-1947), sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals((-1947L), gCInfo2_1.getClsBytesBefore());
      assertEquals(-1947, gCInfo2_1.getCpuTime());
      assertEquals((-1947L), gCInfo2_1.getHeapSize());
      assertEquals((-1947L), gCInfo2_1.getObjBytesAfter());
      assertEquals(-1947, gCInfo2_1.getDuration());
      assertEquals((-1947L), gCInfo2_1.getPageFaults());
      assertEquals((-1947L), gCInfo2_1.getClsBytesAfter());
      assertEquals((-1947L), gCInfo2_1.getObjBytesFreed());
      assertEquals((-1947L), gCInfo2_1.getObjBytesBefore());
      assertEquals(-1947, gCInfo2_1.getUnloadedClasses());
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setProcessname("}7z");
      GCInfo2 gCInfo2_1 = new GCInfo2();
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(false, boolean0);
      assertFalse(gCInfo2_1.equals(gCInfo2_0));
  }

  @Test
  public void test22()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", (-1951), (-1951), (long) (-1951), 0L, (long) (-1951), 0L, (long) (-1951), (long) (-1951), 0L, (-1951), 0L, sTATECOLOR0);
      boolean boolean0 = gCInfo2_1.equals((Object) gCInfo2_0);
      assertEquals(-1951, gCInfo2_1.getDuration());
      assertEquals(0L, gCInfo2_1.getClsBytesBefore());
      assertEquals((-1951L), gCInfo2_1.getObjBytesFreed());
      assertEquals((-1951L), gCInfo2_1.getObjBytesBefore());
      assertEquals(0L, gCInfo2_1.getHeapSize());
      assertEquals(-1951, gCInfo2_1.getCpuTime());
      assertEquals(-1951, gCInfo2_1.getUnloadedClasses());
      assertEquals(0L, gCInfo2_1.getPageFaults());
      assertEquals(0L, gCInfo2_1.getObjBytesAfter());
      assertEquals((-1951L), gCInfo2_1.getClsBytesFreed());
      assertEquals(false, boolean0);
      assertEquals((-1951L), gCInfo2_1.getClsBytesAfter());
  }

  @Test
  public void test23()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      gCInfo2_0.setType("DRJ(vYR(");
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", (-1951), (-1951), 0L, (long) 0, (long) (-1951), (long) 0, 0L, (long) 0, 0L, (-1951), (long) 0, sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(0L, gCInfo2_1.getClsBytesBefore());
      assertEquals(-1951, gCInfo2_1.getCpuTime());
      assertEquals(0L, gCInfo2_1.getPageFaults());
      assertEquals(0L, gCInfo2_1.getObjBytesBefore());
      assertEquals(0L, gCInfo2_1.getObjBytesAfter());
      assertEquals((-1951L), gCInfo2_1.getObjBytesFreed());
      assertEquals(-1951, gCInfo2_1.getUnloadedClasses());
      assertEquals(0L, gCInfo2_1.getClsBytesAfter());
      assertEquals(0L, gCInfo2_1.getHeapSize());
      assertEquals(false, boolean0);
      assertEquals(-1951, gCInfo2_1.getDuration());
  }

  @Test
  public void test24()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      gCInfo2_0.setType("DRJ(vYR(");
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", (-1951), (-1951), (long) (-1951), 0L, (long) (-1951), 0L, (long) (-1951), (long) (-1951), 0L, (-1951), 0L, sTATECOLOR0);
      boolean boolean0 = gCInfo2_1.equals((Object) gCInfo2_0);
      assertEquals(-1951, gCInfo2_1.getUnloadedClasses());
      assertEquals(-1951, gCInfo2_1.getCpuTime());
      assertEquals((-1951L), gCInfo2_1.getObjBytesBefore());
      assertEquals(-1951, gCInfo2_1.getDuration());
      assertEquals(0L, gCInfo2_1.getPageFaults());
      assertEquals(0L, gCInfo2_1.getObjBytesAfter());
      assertEquals(false, boolean0);
      assertEquals(0L, gCInfo2_1.getHeapSize());
      assertEquals((-1951L), gCInfo2_1.getObjBytesFreed());
      assertEquals((-1951L), gCInfo2_1.getClsBytesFreed());
      assertEquals((-1951L), gCInfo2_1.getClsBytesAfter());
      assertEquals(0L, gCInfo2_1.getClsBytesBefore());
  }

  @Test
  public void test25()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setReason("CDAT");
      gCInfo2_0.setProcessname("CDAT");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      gCInfo2_0.setType("CDAT");
      GCInfo2 gCInfo2_1 = new GCInfo2("CDAT", "CDAT", "CDAT", "CDAT", (-1947), (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (long) (-1947), (-1947), (long) (-1947), sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals((-1947L), gCInfo2_1.getClsBytesFreed());
      assertEquals((-1947L), gCInfo2_1.getObjBytesBefore());
      assertEquals(-1947, gCInfo2_1.getCpuTime());
      assertEquals(-1947, gCInfo2_1.getDuration());
      assertEquals((-1947L), gCInfo2_1.getObjBytesFreed());
      assertEquals((-1947L), gCInfo2_1.getClsBytesBefore());
      assertEquals((-1947L), gCInfo2_1.getPageFaults());
      assertEquals((-1947L), gCInfo2_1.getObjBytesAfter());
      assertEquals(-1947, gCInfo2_1.getUnloadedClasses());
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setReason("DRJ(vYR(");
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      gCInfo2_0.setType("DRJ(vYR(");
      gCInfo2_0.setStartTime("DRJ(vYR(");
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", (-1951), (-1951), 0L, (long) 0, (long) (-1951), (long) 0, 0L, (long) 0, 0L, (-1951), (long) 0, sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals((-1951L), gCInfo2_1.getObjBytesFreed());
      assertEquals(0L, gCInfo2_1.getObjBytesAfter());
      assertEquals(-1951, gCInfo2_1.getUnloadedClasses());
      assertEquals(-1951, gCInfo2_1.getCpuTime());
      assertEquals(0L, gCInfo2_1.getObjBytesBefore());
      assertEquals(false, boolean0);
      assertEquals(-1951, gCInfo2_1.getDuration());
      assertEquals(0L, gCInfo2_1.getPageFaults());
  }

  @Test
  public void test27()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      GCInfo2 gCInfo2_1 = new GCInfo2();
      gCInfo2_1.setObjBytesAfter((-373L));
      boolean boolean0 = gCInfo2_1.equals((Object) gCInfo2_0);
      assertEquals((-373L), gCInfo2_1.getObjBytesAfter());
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      GCInfo2 gCInfo2_1 = new GCInfo2();
      gCInfo2_1.setObjBytesFreed((-598L));
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals((-598L), gCInfo2_1.getObjBytesFreed());
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setReason("DRJ(vYR(");
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      gCInfo2_0.setType("DRJ(vYR(");
      gCInfo2_0.setStartTime("DRJ(vYR(");
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", 0, 0, (long) 0, (long) 0, 0L, (long) 0, 0L, (long) (-1951), (long) (-1951), 0, (long) 0, sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(0, gCInfo2_1.getCpuTime());
      assertEquals(0L, gCInfo2_1.getObjBytesFreed());
      assertEquals(0L, gCInfo2_1.getPageFaults());
      assertEquals(0, gCInfo2_1.getUnloadedClasses());
      assertEquals(0L, gCInfo2_1.getClsBytesAfter());
      assertEquals(0L, gCInfo2_1.getClsBytesBefore());
      assertEquals(0, gCInfo2_1.getDuration());
      assertEquals((-1951L), gCInfo2_1.getHeapSize());
      assertEquals(false, boolean0);
      assertEquals((-1951L), gCInfo2_1.getClsBytesFreed());
      assertEquals(0L, gCInfo2_1.getObjBytesAfter());
  }

  @Test
  public void test30()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setReason("DRJ(vYR(");
      gCInfo2_0.setProcessname("DRJ(vYR(");
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      gCInfo2_0.setType("DRJ(vYR(");
      gCInfo2_0.setStartTime("DRJ(vYR(");
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", 0, 0, (long) 0, 0L, (long) 0, 0L, (long) 0, (long) 0, 0L, 0, 0L, sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(0, gCInfo2_1.getCpuTime());
      assertEquals(false, boolean0);
      assertEquals(0, gCInfo2_0.getUnloadedClasses());
      assertEquals(0, gCInfo2_1.getDuration());
  }

  @Test
  public void test31()  throws Throwable  {
      STATECOLOR sTATECOLOR0 = STATECOLOR.value4;
      GCInfo2 gCInfo2_0 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", 0, 0, (long) 0, 0L, (long) 0, 0L, (long) 0, (long) 0, 0L, 0, 0L, sTATECOLOR0);
      GCInfo2 gCInfo2_1 = new GCInfo2("DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", "DRJ(vYR(", 0, 0, 0L, (long) 0, (long) 0, (long) 0, 0L, (long) 0, 0L, 0, (long) 0, sTATECOLOR0);
      boolean boolean0 = gCInfo2_0.equals((Object) gCInfo2_1);
      assertEquals(0, gCInfo2_1.getCpuTime());
      assertEquals(0, gCInfo2_1.getDuration());
      assertEquals(0, gCInfo2_1.getUnloadedClasses());
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setProcessname("DRJ(vYR(");
      int int0 = gCInfo2_0.hashCode();
      assertEquals(171977766, int0);
  }

  @Test
  public void test33()  throws Throwable  {
      GCInfo2 gCInfo2_0 = new GCInfo2();
      gCInfo2_0.setReason("DRJ(vYR(");
      int int0 = gCInfo2_0.hashCode();
      assertEquals(171977766, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      STATECOLOR sTATECOLOR0 = STATECOLOR.value1;
      GCInfo2 gCInfo2_0 = new GCInfo2((String) null, (String) null, (String) null, (String) null, 0, 0, (long) 0, (long) 0, (long) 0, (long) 0, (long) 0, (long) 0, (long) 0, 0, (long) 0, sTATECOLOR0);
      int int0 = gCInfo2_0.hashCode();
      assertEquals((-1432415818), int0);
  }
}
