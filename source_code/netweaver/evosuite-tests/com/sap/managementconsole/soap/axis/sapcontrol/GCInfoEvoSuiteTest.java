/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.GCInfo;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GCInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", 1163, (-28), (long) 1163, (long) 1163, (long) (-28), (long) 1163, (long) (-28), (long) (-28), (long) 1163, 1163);
      gCInfo0.setProcessname("xUTOPk&\"uNUbH/");
      assertEquals((-28L), gCInfo0.getObjBytesFreed());
      assertEquals(1163, gCInfo0.getUnloadedClasses());
      assertEquals(-28, gCInfo0.getCpuTime());
      assertEquals(1163L, gCInfo0.getObjBytesAfter());
      assertEquals(1163L, gCInfo0.getClsBytesBefore());
      assertEquals((-28L), gCInfo0.getClsBytesFreed());
      assertEquals(1163L, gCInfo0.getObjBytesBefore());
      assertEquals(1163L, gCInfo0.getHeapSize());
      assertEquals((-28L), gCInfo0.getClsBytesAfter());
      assertEquals(1163, gCInfo0.getDuration());
  }

  @Test
  public void test1()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("?eVbT8w(he\"", "?eVbT8w(he\"", "?eVbT8w(he\"", "?eVbT8w(he\"", (-8), (-8), (long) (-8), (long) (-8), (long) (-8), (long) (-8), (long) (-8), (long) (-8), (long) (-8), (-8));
      int int0 = gCInfo0.hashCode();
      assertEquals(1756783762, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = new QName("!lep");
      BeanSerializer beanSerializer0 = (BeanSerializer)GCInfo.getSerializer("!lep", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test3()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setCpuTime(0);
      assertEquals(0, gCInfo0.getCpuTime());
  }

  @Test
  public void test4()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setClsBytesBefore((-9L));
      GCInfo gCInfo1 = new GCInfo();
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals((-9L), gCInfo0.getClsBytesBefore());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("", "", "", "", (-115), (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (-115));
      gCInfo0.setStartTime("E");
      GCInfo gCInfo1 = new GCInfo("", "", "", "", (-115), (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (-115));
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(-115, gCInfo0.getDuration());
      assertEquals((-115L), gCInfo0.getObjBytesFreed());
      assertEquals((-115L), gCInfo0.getObjBytesAfter());
      assertEquals((-115L), gCInfo0.getClsBytesBefore());
      assertEquals((-115L), gCInfo0.getClsBytesAfter());
      assertEquals(-115, gCInfo0.getCpuTime());
      assertEquals(false, boolean0);
      assertEquals((-115L), gCInfo0.getObjBytesBefore());
      assertEquals((-115L), gCInfo0.getHeapSize());
      assertEquals(-115, gCInfo0.getUnloadedClasses());
  }

  @Test
  public void test6()  throws Throwable  {
      TypeDesc typeDesc0 = GCInfo.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test7()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setClsBytesFreed((long) 1);
      assertEquals(1L, gCInfo0.getClsBytesFreed());
  }

  @Test
  public void test8()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setObjBytesFreed(535L);
      GCInfo gCInfo1 = new GCInfo();
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(535L, gCInfo0.getObjBytesFreed());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setReason("eKOE");
      assertEquals(0, gCInfo0.getUnloadedClasses());
  }

  @Test
  public void test10()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setObjBytesBefore((-2L));
      GCInfo gCInfo1 = new GCInfo();
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals((-2L), gCInfo0.getObjBytesBefore());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setObjBytesAfter(0L);
      assertEquals(0L, gCInfo0.getClsBytesAfter());
  }

  @Test
  public void test12()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setHeapSize((long) 30000);
      assertEquals(30000L, gCInfo0.getHeapSize());
  }

  @Test
  public void test13()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setDuration(0);
      assertEquals(0, gCInfo0.getDuration());
  }

  @Test
  public void test14()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = new QName("!lep");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)GCInfo.getDeserializer("!lep", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test15()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      boolean boolean0 = gCInfo0.equals((Object) ":~m,8}k&aB");
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("!lep", "!lep", "!lep", "!lep", 1229, 1229, (long) 1229, (long) 1229, (long) 1229, (long) 1229, (long) 1229, (long) 1229, (long) 1229, 1229);
      GCInfo gCInfo1 = new GCInfo();
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(1229L, gCInfo0.getClsBytesAfter());
      assertEquals(1229L, gCInfo0.getObjBytesBefore());
      assertEquals(false, boolean0);
      assertEquals(1229L, gCInfo0.getClsBytesFreed());
      assertEquals(1229L, gCInfo0.getObjBytesAfter());
      assertEquals(1229L, gCInfo0.getHeapSize());
      assertEquals(1229L, gCInfo0.getObjBytesFreed());
      assertEquals(1229, gCInfo0.getCpuTime());
      assertEquals(1229L, gCInfo0.getClsBytesBefore());
      assertEquals(1229, gCInfo0.getUnloadedClasses());
      assertFalse(gCInfo1.equals(gCInfo0));
      assertEquals(1229, gCInfo0.getDuration());
  }

  @Test
  public void test17()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo((String) null, (String) null, (String) null, (String) null, 0, 0, (long) 0, (-705L), (long) 0, (long) 0, (-705L), (long) 0, (long) 0, 0);
      GCInfo gCInfo1 = new GCInfo((String) null, (String) null, (String) null, (String) null, 0, 0, (long) 0, (long) 0, (long) 0, (-705L), (-705L), (-705L), (-705L), 0);
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(0L, gCInfo1.getObjBytesFreed());
      assertEquals(0L, gCInfo1.getObjBytesAfter());
      assertEquals(0L, gCInfo1.getObjBytesBefore());
      assertEquals(0L, gCInfo0.getHeapSize());
      assertEquals((-705L), gCInfo0.getClsBytesAfter());
      assertEquals(0L, gCInfo0.getClsBytesBefore());
      assertEquals(0L, gCInfo0.getObjBytesFreed());
      assertEquals(0L, gCInfo0.getClsBytesFreed());
      assertEquals((-705L), gCInfo0.getObjBytesAfter());
      assertEquals((-705L), gCInfo1.getClsBytesBefore());
      assertEquals((-705L), gCInfo1.getClsBytesFreed());
      assertEquals(0L, gCInfo0.getObjBytesBefore());
      assertEquals(0, gCInfo0.getDuration());
      assertEquals((-705L), gCInfo1.getClsBytesAfter());
      assertEquals(0, gCInfo0.getCpuTime());
      assertEquals(0, gCInfo0.getUnloadedClasses());
      assertEquals(false, boolean0);
      assertEquals((-705L), gCInfo1.getHeapSize());
  }

  @Test
  public void test18()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      GCInfo gCInfo1 = new GCInfo("[ENV] No configuration defined foa iem9", "[ENV] No configuration defined foa iem9", "[ENV] No configuration defined foa iem9", "[ENV] No configuration defined foa iem9", 1, 1, (long) 1, (long) 1, (long) 1, (long) 1, (long) 1, (long) 1, (long) 1, 1);
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(1L, gCInfo1.getClsBytesAfter());
      assertEquals(1L, gCInfo1.getClsBytesBefore());
      assertEquals(1L, gCInfo1.getObjBytesBefore());
      assertEquals(1L, gCInfo1.getClsBytesFreed());
      assertEquals(1L, gCInfo1.getObjBytesAfter());
      assertEquals(1, gCInfo1.getCpuTime());
      assertEquals(1L, gCInfo1.getObjBytesFreed());
      assertEquals(1L, gCInfo1.getHeapSize());
      assertEquals(false, boolean0);
      assertEquals(1, gCInfo1.getDuration());
      assertEquals(1, gCInfo1.getUnloadedClasses());
  }

  @Test
  public void test19()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("", "", "", "", (-115), (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (-115));
      GCInfo gCInfo1 = new GCInfo("", "", "E", "E", (-115), (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (-115));
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(false, boolean0);
      assertEquals((-115L), gCInfo1.getHeapSize());
      assertEquals((-115L), gCInfo1.getClsBytesBefore());
      assertEquals("", gCInfo1.getType());
      assertEquals("", gCInfo1.getProcessname());
      assertEquals(-115, gCInfo1.getUnloadedClasses());
      assertEquals(-115, gCInfo1.getCpuTime());
      assertEquals("E", gCInfo1.getReason());
      assertEquals("E", gCInfo1.getStartTime());
      assertEquals((-115L), gCInfo1.getClsBytesFreed());
      assertEquals((-115L), gCInfo1.getObjBytesFreed());
      assertEquals(-115, gCInfo1.getDuration());
      assertEquals((-115L), gCInfo1.getObjBytesAfter());
      assertEquals((-115L), gCInfo1.getClsBytesAfter());
      assertEquals((-115L), gCInfo1.getObjBytesBefore());
  }

  @Test
  public void test20()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      GCInfo gCInfo1 = new GCInfo();
      assertTrue(gCInfo1.equals(gCInfo0));
      
      gCInfo1.setType("");
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertFalse(gCInfo1.equals(gCInfo0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      gCInfo0.setType("' was found at ");
      GCInfo gCInfo1 = new GCInfo();
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(false, boolean0);
      assertFalse(gCInfo1.equals(gCInfo0));
  }

  @Test
  public void test22()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      GCInfo gCInfo1 = new GCInfo((String) null, (String) null, "r%4z`])+-[G4=$\"xx0w", "r%4z`])+-[G4=$\"xx0w", 0, 116, (long) 116, (long) 116, (long) 116, (long) 116, (long) 116, (long) 116, (long) 116, 116);
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(116L, gCInfo1.getObjBytesAfter());
      assertEquals(116L, gCInfo1.getClsBytesFreed());
      assertEquals(116L, gCInfo1.getObjBytesFreed());
      assertEquals(116, gCInfo1.getCpuTime());
      assertEquals(116L, gCInfo1.getObjBytesBefore());
      assertEquals(116L, gCInfo1.getHeapSize());
      assertEquals(false, boolean0);
      assertEquals(116, gCInfo1.getUnloadedClasses());
      assertEquals(0, gCInfo1.getDuration());
      assertEquals(116L, gCInfo1.getClsBytesBefore());
      assertEquals(116L, gCInfo1.getClsBytesAfter());
  }

  @Test
  public void test23()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("", "", "", "", (-115), (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (-115));
      GCInfo gCInfo1 = new GCInfo("", "", "", "", (-115), (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (long) (-115), (-115));
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(-115, gCInfo0.getCpuTime());
      assertEquals((-115L), gCInfo0.getClsBytesAfter());
      assertEquals((-115L), gCInfo0.getClsBytesFreed());
      assertEquals(-115, gCInfo0.getUnloadedClasses());
      assertEquals((-115L), gCInfo0.getObjBytesFreed());
      assertEquals(-115, gCInfo0.getDuration());
      assertEquals((-115L), gCInfo0.getHeapSize());
      assertEquals((-115L), gCInfo0.getClsBytesBefore());
      assertEquals(true, boolean0);
      assertEquals((-115L), gCInfo0.getObjBytesBefore());
  }

  @Test
  public void test24()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      GCInfo gCInfo1 = new GCInfo((String) null, (String) null, (String) null, "-&Zw", 0, 0, (long) 0, (long) 0, (-1694L), (-1694L), (-1694L), (-1694L), (-1694L), 0);
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals((-1694L), gCInfo1.getClsBytesFreed());
      assertEquals((-1694L), gCInfo1.getObjBytesFreed());
      assertEquals(false, boolean0);
      assertEquals((-1694L), gCInfo1.getHeapSize());
      assertEquals(0, gCInfo1.getUnloadedClasses());
      assertEquals(0, gCInfo1.getDuration());
      assertEquals((-1694L), gCInfo1.getClsBytesAfter());
      assertEquals(0L, gCInfo1.getObjBytesAfter());
      assertEquals(0, gCInfo1.getCpuTime());
      assertEquals((-1694L), gCInfo1.getClsBytesBefore());
      assertEquals(0L, gCInfo1.getObjBytesBefore());
  }

  @Test
  public void test25()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", 1163, (-28), (long) 1163, (long) 1163, (long) (-28), (long) 1163, (long) (-28), (long) (-28), (long) 1163, 1163);
      GCInfo gCInfo1 = new GCInfo("xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", (-28), 1163, (long) 1163, (long) 1163, (long) 1163, (long) (-28), (long) 1163, (long) (-28), (long) 1163, 1163);
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals((-28L), gCInfo0.getClsBytesAfter());
      assertEquals(1163L, gCInfo0.getObjBytesBefore());
      assertEquals((-28L), gCInfo1.getClsBytesFreed());
      assertEquals(1163, gCInfo0.getUnloadedClasses());
      assertEquals(false, boolean0);
      assertEquals(1163L, gCInfo0.getClsBytesBefore());
      assertEquals(1163L, gCInfo0.getObjBytesAfter());
      assertEquals(1163, gCInfo1.getUnloadedClasses());
      assertEquals((-28L), gCInfo0.getObjBytesFreed());
      assertEquals((-28L), gCInfo1.getClsBytesBefore());
      assertEquals(-28, gCInfo0.getCpuTime());
      assertEquals(1163L, gCInfo1.getObjBytesBefore());
      assertEquals(1163L, gCInfo0.getHeapSize());
      assertEquals(1163L, gCInfo1.getClsBytesAfter());
      assertEquals(1163, gCInfo0.getDuration());
      assertEquals(1163L, gCInfo1.getObjBytesFreed());
      assertEquals(1163L, gCInfo1.getHeapSize());
  }

  @Test
  public void test26()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo("xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", (-28), 1163, (long) 1163, (long) 1163, (long) 1163, (long) (-28), (long) 1163, (long) (-28), (long) 1163, 1163);
      GCInfo gCInfo1 = new GCInfo("xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", "xUTOPk&\"uNUbH/", (-28), (-28), (long) (-28), (long) (-28), (long) (-28), (long) (-28), (long) (-28), (long) (-28), (long) (-28), (-28));
      boolean boolean0 = gCInfo1.equals((Object) gCInfo0);
      assertEquals(-28, gCInfo0.getDuration());
      assertEquals(1163L, gCInfo0.getHeapSize());
      assertEquals(1163, gCInfo0.getUnloadedClasses());
      assertEquals(false, boolean0);
      assertEquals(1163, gCInfo0.getCpuTime());
      assertEquals((-28L), gCInfo0.getClsBytesBefore());
      assertEquals(1163L, gCInfo0.getObjBytesBefore());
      assertEquals(1163L, gCInfo0.getObjBytesAfter());
      assertEquals(1163L, gCInfo0.getClsBytesAfter());
      assertEquals(1163L, gCInfo0.getObjBytesFreed());
      assertEquals((-28L), gCInfo0.getClsBytesFreed());
  }

  @Test
  public void test27()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      GCInfo gCInfo1 = new GCInfo();
      gCInfo1.setClsBytesAfter((-1777L));
      boolean boolean0 = gCInfo1.equals((Object) gCInfo0);
      assertEquals((-1777L), gCInfo1.getClsBytesAfter());
      assertEquals(false, boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      GCInfo gCInfo1 = new GCInfo();
      gCInfo0.setUnloadedClasses(30000);
      boolean boolean0 = gCInfo0.equals((Object) gCInfo1);
      assertEquals(30000, gCInfo0.getUnloadedClasses());
      assertEquals(false, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      GCInfo gCInfo0 = new GCInfo();
      int int0 = gCInfo0.hashCode();
      assertEquals(1, int0);
  }
}
