/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.ICMCacheEntry;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ICMCacheEntryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("", (-10), (long) (-10), true, "", "", "", "", "");
      int int0 = iCMCacheEntry0.hashCode();
      assertEquals(true, iCMCacheEntry0.isValid());
      assertEquals(1231, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      iCMCacheEntry0.setName("");
      assertEquals(false, iCMCacheEntry0.isValid());
  }

  @Test
  public void test2()  throws Throwable  {
      QName qName0 = new QName("", "");
      Class<?> class0 = ICMCacheEntry.class;
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)ICMCacheEntry.getDeserializer("", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test3()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("", 6, (long) 6, true, "", "", "", "", "");
      iCMCacheEntry0.setCacheurl("");
      assertEquals(true, iCMCacheEntry0.isValid());
      assertEquals(6L, iCMCacheEntry0.getSize());
      assertEquals(6, iCMCacheEntry0.getVersion());
  }

  @Test
  public void test4()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("s:8:uk\"", (-1287), (long) (-1287), true, "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"");
      iCMCacheEntry0.setVersion((-20));
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry("s:8:uk\"", (-1287), (long) (-20), true, "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals(-20, iCMCacheEntry0.getVersion());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = ICMCacheEntry.class;
      QName qName0 = QName.valueOf("&L^VIltk-LguW7lH");
      BeanSerializer beanSerializer0 = (BeanSerializer)ICMCacheEntry.getSerializer("&L^VIltk-LguW7lH", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test6()  throws Throwable  {
      TypeDesc typeDesc0 = ICMCacheEntry.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test7()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      iCMCacheEntry0.setSize(1524L);
      assertEquals(1524L, iCMCacheEntry0.getSize());
  }

  @Test
  public void test8()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("s:8:uk\"", (-1287), (long) (-1287), true, "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"");
      boolean boolean0 = iCMCacheEntry0.equals((Object) "");
      assertEquals((-1287L), iCMCacheEntry0.getSize());
      assertEquals(true, iCMCacheEntry0.isValid());
      assertEquals(false, boolean0);
      assertEquals(-1287, iCMCacheEntry0.getVersion());
  }

  @Test
  public void test9()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("", (-10), (long) (-10), true, "", "", "", "", "");
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals(-10, iCMCacheEntry0.getVersion());
      assertEquals(false, boolean0);
      assertFalse(iCMCacheEntry1.equals(iCMCacheEntry0));
      assertEquals((-10L), iCMCacheEntry0.getSize());
      assertEquals(true, iCMCacheEntry0.isValid());
  }

  @Test
  public void test10()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry(">Xeu0+AZ4NF>6", 1564, (long) 1564, true, ">Xeu0+AZ4NF>6", ">Xeu0+AZ4NF>6", ">Xeu0+AZ4NF>6", ">Xeu0+AZ4NF>6", ">Xeu0+AZ4NF>6");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals(false, boolean0);
      assertEquals(true, iCMCacheEntry1.isValid());
      assertEquals(1564, iCMCacheEntry1.getVersion());
      assertEquals(1564L, iCMCacheEntry1.getSize());
  }

  @Test
  public void test12()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("/hNb", (-1275), (long) (-1275), true, "/hNb", "/hNb", "/hNb", "/hNb", (String) null);
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry("/hNb", (-1275), (long) (-1275), true, "/hNb", "/hNb", "/hNb", "/hNb", "/hNb");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals((-1275L), iCMCacheEntry1.getSize());
      assertEquals(false, boolean0);
      assertEquals(-1275, iCMCacheEntry1.getVersion());
      assertEquals(true, iCMCacheEntry1.isValid());
  }

  @Test
  public void test13()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry((String) null, 0, (-590L), false, (String) null, (String) null, (String) null, (String) null, (String) null);
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertFalse(iCMCacheEntry1.equals(iCMCacheEntry0));
      assertEquals(0, iCMCacheEntry1.getVersion());
      assertEquals(false, iCMCacheEntry1.isValid());
      assertEquals(false, boolean0);
      assertEquals((-590L), iCMCacheEntry1.getSize());
  }

  @Test
  public void test14()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      iCMCacheEntry0.setValid(true);
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals(true, iCMCacheEntry0.isValid());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      assertTrue(iCMCacheEntry1.equals(iCMCacheEntry0));
      
      iCMCacheEntry1.setCache("Error while trying to output diagnostics about bad class '");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertFalse(iCMCacheEntry1.equals(iCMCacheEntry0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      iCMCacheEntry0.setCache("yU*~B'");
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertFalse(iCMCacheEntry1.equals(iCMCacheEntry0));
      assertEquals(0, iCMCacheEntry0.getVersion());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      assertTrue(iCMCacheEntry1.equals(iCMCacheEntry0));
      
      iCMCacheEntry0.setCreationTime("E{C6g<4$G9dMO");
      boolean boolean0 = iCMCacheEntry1.equals((Object) iCMCacheEntry0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      assertTrue(iCMCacheEntry1.equals(iCMCacheEntry0));
      
      iCMCacheEntry0.setCreationTime("");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertFalse(iCMCacheEntry0.equals(iCMCacheEntry1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      assertTrue(iCMCacheEntry1.equals(iCMCacheEntry0));
      
      iCMCacheEntry1.setLastAccessTime("E{C6g<4$G9dMO");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      assertTrue(iCMCacheEntry1.equals(iCMCacheEntry0));
      
      iCMCacheEntry0.setLastAccessTime("*");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertFalse(iCMCacheEntry1.equals(iCMCacheEntry0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      assertTrue(iCMCacheEntry1.equals(iCMCacheEntry0));
      
      iCMCacheEntry1.setExpirationTime("BLd \"Ls");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry();
      assertTrue(iCMCacheEntry1.equals(iCMCacheEntry0));
      
      iCMCacheEntry0.setExpirationTime("XCF>");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertFalse(iCMCacheEntry0.equals(iCMCacheEntry1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("XuF", 47, (long) 47, false, "XuF", "XuF", "XuF", "XuF", "XuF");
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry("XuF", 47, (long) 47, false, "XuF", "XuF", "XuF", "XuF", "Xeu0+AZ4NF>6");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals("XuF", iCMCacheEntry1.getName());
      assertEquals("XuF", iCMCacheEntry1.getCreationTime());
      assertEquals("XuF", iCMCacheEntry1.getLastAccessTime());
      assertEquals("XuF", iCMCacheEntry1.getCache());
      assertEquals(false, iCMCacheEntry1.isValid());
      assertEquals(47, iCMCacheEntry1.getVersion());
      assertEquals(false, boolean0);
      assertEquals("XuF", iCMCacheEntry1.getExpirationTime());
      assertEquals(47L, iCMCacheEntry1.getSize());
  }

  @Test
  public void test24()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry("s:8:uk\"", (-1287), (long) (-1287), true, "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"");
      ICMCacheEntry iCMCacheEntry1 = new ICMCacheEntry("s:8:uk\"", (-1287), (long) (-1287), true, "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"", "s:8:uk\"");
      boolean boolean0 = iCMCacheEntry0.equals((Object) iCMCacheEntry1);
      assertEquals((-1287L), iCMCacheEntry1.getSize());
      assertEquals(true, iCMCacheEntry1.isValid());
      assertEquals(-1287, iCMCacheEntry1.getVersion());
      assertEquals(true, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      ICMCacheEntry iCMCacheEntry0 = new ICMCacheEntry();
      int int0 = iCMCacheEntry0.hashCode();
      assertEquals(1238, int0);
  }
}
