/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.RESTRICTIONTYPE;
import java.io.ObjectStreamException;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.EnumDeserializer;
import org.apache.axis.encoding.ser.EnumSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RESTRICTIONTYPEEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TypeDesc typeDesc0 = RESTRICTIONTYPE.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test1()  throws Throwable  {
      RESTRICTIONTYPE rESTRICTIONTYPE0 = RESTRICTIONTYPE.fromString("");
      rESTRICTIONTYPE0.readResolve();
  }

  @Test
  public void test2()  throws Throwable  {
      RESTRICTIONTYPE rESTRICTIONTYPE0 = RESTRICTIONTYPE.value6;
      int int0 = rESTRICTIONTYPE0.hashCode();
      assertEquals((-2042173856), int0);
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = RESTRICTIONTYPE.class;
      QName qName0 = new QName("");
      EnumDeserializer enumDeserializer0 = (EnumDeserializer)RESTRICTIONTYPE.getDeserializer(")fSc:(n`+g%^A>!H", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", enumDeserializer0.getMechanismType());
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = RESTRICTIONTYPE.class;
      QName qName0 = new QName("");
      EnumSerializer enumSerializer0 = (EnumSerializer)RESTRICTIONTYPE.getSerializer("", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", enumSerializer0.getMechanismType());
  }

  @Test
  public void test5()  throws Throwable  {
      RESTRICTIONTYPE rESTRICTIONTYPE0 = new RESTRICTIONTYPE("");
      assertEquals("", rESTRICTIONTYPE0.toString());
      assertNotNull(rESTRICTIONTYPE0);
  }

  @Test
  public void test6()  throws Throwable  {
      RESTRICTIONTYPE rESTRICTIONTYPE0 = RESTRICTIONTYPE.fromString("");
      assertNotNull(rESTRICTIONTYPE0);
      
      String string0 = rESTRICTIONTYPE0.getValue();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      try {
        RESTRICTIONTYPE.fromString(";l=~|\"Z9k\n3E");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RESTRICTIONTYPE rESTRICTIONTYPE0 = RESTRICTIONTYPE.fromString("");
      assertNotNull(rESTRICTIONTYPE0);
      
      RESTRICTIONTYPE rESTRICTIONTYPE1 = RESTRICTIONTYPE.value2;
      boolean boolean0 = rESTRICTIONTYPE0.equals((Object) rESTRICTIONTYPE1);
      assertEquals(false, boolean0);
      assertEquals("", rESTRICTIONTYPE0.getValue());
  }

  @Test
  public void test9()  throws Throwable  {
      RESTRICTIONTYPE rESTRICTIONTYPE0 = RESTRICTIONTYPE.value7;
      boolean boolean0 = rESTRICTIONTYPE0.equals((Object) rESTRICTIONTYPE0);
      assertEquals(true, boolean0);
  }
}
