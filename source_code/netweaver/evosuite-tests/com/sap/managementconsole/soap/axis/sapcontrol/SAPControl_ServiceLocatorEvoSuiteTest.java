/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.sapcontrol.SAPControl_ServiceLocator;
import com.sap.managementconsole.soap.axis.sapcontrol.SubProfileParameter;
import java.lang.reflect.Constructor;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.xml.namespace.QName;
import javax.xml.rpc.ServiceException;
import org.apache.axis.EngineConfiguration;
import org.apache.axis.configuration.BasicServerConfig;
import org.apache.axis.deployment.wsdd.WSDDConstants;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SAPControl_ServiceLocatorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          QName qName0 = sAPControl_ServiceLocator0.getServiceName();
          Class<?> class0 = SAPControl_ServiceLocator.class;
          sAPControl_ServiceLocator0.getPort(qName0, (Class) class0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          QName qName0 = sAPControl_ServiceLocator0.getServiceName();
          sAPControl_ServiceLocator0.setEndpointAddress(qName0, "http://localhost:50013/SAPControl.cgi");
          assertEquals("SAPControl", sAPControl_ServiceLocator0.getSAPControlWSDDServiceName());
          assertEquals("http://localhost:50013/SAPControl.cgi", sAPControl_ServiceLocator0.getSAPControlAddress());
          assertEquals("{urn:SAPControl}SAPControl", qName0.toString());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          String string0 = sAPControl_ServiceLocator0.getSAPControlAddress();
          assertNotNull(string0);
          assertEquals("SAPControl", sAPControl_ServiceLocator0.getSAPControlWSDDServiceName());
          assertEquals("http://localhost:50013/SAPControl.cgi", string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      BasicServerConfig basicServerConfig0 = new BasicServerConfig();
      SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator((EngineConfiguration) basicServerConfig0);
      assertEquals("http://localhost:50013/SAPControl.cgi", sAPControl_ServiceLocator0.getSAPControlAddress());
      assertEquals("SAPControl", sAPControl_ServiceLocator0.getSAPControlWSDDServiceName());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          assertEquals("SAPControl", sAPControl_ServiceLocator0.getSAPControlWSDDServiceName());
          
          sAPControl_ServiceLocator0.setSAPControlWSDDServiceName((String) null);
          assertEquals("http://localhost:50013/SAPControl.cgi", sAPControl_ServiceLocator0.getSAPControlAddress());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          QName qName0 = WSDDConstants.QNAME_FAULT;
          Class<?> class0 = SubProfileParameter.class;
          try {
            sAPControl_ServiceLocator0.getPort(qName0, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  com.sap.managementconsole.soap.axis.sapcontrol.SubProfileParameter
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          Class<?> class0 = Constructor.class;
          try {
            sAPControl_ServiceLocator0.getPort((QName) null, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  java.lang.reflect.Constructor
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          Iterator<Object> iterator0 = sAPControl_ServiceLocator0.getPorts();
          assertNotNull(iterator0);
          
          Iterator<Object> iterator1 = sAPControl_ServiceLocator0.getPorts();
          assertEquals(true, iterator1.hasNext());
          assertEquals("SAPControl", sAPControl_ServiceLocator0.getSAPControlWSDDServiceName());
          assertEquals("http://localhost:50013/SAPControl.cgi", sAPControl_ServiceLocator0.getSAPControlAddress());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPControl_ServiceLocator sAPControl_ServiceLocator0 = new SAPControl_ServiceLocator();
          QName qName0 = WSDDConstants.QNAME_TRANSPORT;
          try {
            sAPControl_ServiceLocator0.setEndpointAddress(qName0, (String) null);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             *  Cannot set Endpoint Address for Unknown Porttransport
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
