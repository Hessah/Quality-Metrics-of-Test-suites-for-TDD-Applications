/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.saphostcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.saphostcontrol.CIMAttribute;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CIMAttributeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = CIMAttribute.class;
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)CIMAttribute.getDeserializer("", (Class) class0, (QName) null);
      assertEquals("Axis SAX Mechanism", beanDeserializer0.getMechanismType());
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = QName.class;
      QName qName0 = new QName("%sbE3@H+zZPMt", "%sbE3@H+zZPMt", "%sbE3@H+zZPMt");
      BeanSerializer beanSerializer0 = (BeanSerializer)CIMAttribute.getSerializer("%sbE3@H+zZPMt", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test2()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute("", "", "");
      CIMAttribute cIMAttribute1 = new CIMAttribute("", "", "");
      boolean boolean0 = cIMAttribute0.equals((Object) cIMAttribute1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TypeDesc typeDesc0 = CIMAttribute.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test4()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      cIMAttribute0.setMName("%sbE3@H+zZPMt");
      assertNull(cIMAttribute0.getMType());
  }

  @Test
  public void test5()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      boolean boolean0 = cIMAttribute0.equals((Object) "4*~Ge+=EI,d^Qq@\"78Nj");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute("", "", "");
      CIMAttribute cIMAttribute1 = new CIMAttribute();
      boolean boolean0 = cIMAttribute1.equals((Object) cIMAttribute0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      CIMAttribute cIMAttribute1 = new CIMAttribute();
      boolean boolean0 = cIMAttribute0.equals((Object) cIMAttribute1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute("Null values are not allowed", "Null values are not allowed", "Null values are not allowed");
      CIMAttribute cIMAttribute1 = new CIMAttribute();
      boolean boolean0 = cIMAttribute0.equals((Object) cIMAttribute1);
      assertEquals(false, boolean0);
      assertFalse(cIMAttribute1.equals(cIMAttribute0));
  }

  @Test
  public void test9()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      CIMAttribute cIMAttribute1 = new CIMAttribute();
      assertTrue(cIMAttribute1.equals(cIMAttribute0));
      
      cIMAttribute1.setMType("");
      boolean boolean0 = cIMAttribute0.equals((Object) cIMAttribute1);
      assertFalse(cIMAttribute1.equals(cIMAttribute0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      CIMAttribute cIMAttribute1 = new CIMAttribute();
      assertTrue(cIMAttribute1.equals(cIMAttribute0));
      
      cIMAttribute0.setMType("Null values are not allowed");
      boolean boolean0 = cIMAttribute0.equals((Object) cIMAttribute1);
      assertFalse(cIMAttribute1.equals(cIMAttribute0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      CIMAttribute cIMAttribute1 = new CIMAttribute();
      assertTrue(cIMAttribute1.equals(cIMAttribute0));
      
      cIMAttribute1.setMValue("4*~Ge+=EI,d^Qq@\"78Nj");
      boolean boolean0 = cIMAttribute0.equals((Object) cIMAttribute1);
      assertFalse(cIMAttribute0.equals(cIMAttribute1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      cIMAttribute0.setMValue("%sbE3@H+zZPMt");
      CIMAttribute cIMAttribute1 = new CIMAttribute();
      boolean boolean0 = cIMAttribute0.equals((Object) cIMAttribute1);
      assertFalse(cIMAttribute1.equals(cIMAttribute0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute("", "", "");
      int int0 = cIMAttribute0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      CIMAttribute cIMAttribute0 = new CIMAttribute();
      int int0 = cIMAttribute0.hashCode();
      assertEquals(1, int0);
  }
}
