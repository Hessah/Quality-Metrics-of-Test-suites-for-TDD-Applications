/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.saphostcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.saphostcontrol.Database;
import com.sap.managementconsole.soap.axis.saphostcontrol.DatabaseComponent;
import com.sap.managementconsole.soap.axis.saphostcontrol.DatabaseStatus;
import com.sap.managementconsole.soap.axis.saphostcontrol.Property;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DatabaseEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Database database0 = new Database();
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[3];
      database0.setMComponents(databaseComponentArray0);
      Database database1 = new Database();
      boolean boolean0 = database0.equals((Object) database1);
      assertFalse(database1.equals(database0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      QName qName0 = new QName("H", "H", "H");
      Class<?> class0 = QName.class;
      BeanSerializer beanSerializer0 = (BeanSerializer)Database.getSerializer("H", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test2()  throws Throwable  {
      Database database0 = new Database();
      Database database1 = new Database();
      boolean boolean0 = database0.equals((Object) database1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = Object.class;
      QName qName0 = new QName("log4j.defaultInitOverride");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)Database.getDeserializer("log4j.defaultInitOverride", (Class) class0, qName0);
      assertEquals(false, beanDeserializer0.componentsReady());
  }

  @Test
  public void test4()  throws Throwable  {
      Database database0 = new Database();
      Property[] propertyArray0 = new Property[19];
      database0.setMDatabase(propertyArray0);
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[4];
      Database database1 = new Database((DatabaseStatus) null, propertyArray0, databaseComponentArray0);
      boolean boolean0 = database0.equals((Object) database1);
      assertEquals(false, boolean0);
      assertFalse(database1.equals(database0));
  }

  @Test
  public void test5()  throws Throwable  {
      TypeDesc typeDesc0 = Database.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test6()  throws Throwable  {
      DatabaseStatus databaseStatus0 = DatabaseStatus.value8;
      Database database0 = new Database();
      database0.setMStatus(databaseStatus0);
      assertEquals("SAPHostControl-DB-ERROR", databaseStatus0.getValue());
  }

  @Test
  public void test7()  throws Throwable  {
      Database database0 = new Database();
      boolean boolean0 = database0.equals((Object) "SAPHostControl-DB-LAST");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Database database0 = new Database();
      DatabaseStatus databaseStatus0 = DatabaseStatus.value9;
      Property[] propertyArray0 = new Property[8];
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[5];
      Database database1 = new Database(databaseStatus0, propertyArray0, databaseComponentArray0);
      boolean boolean0 = database0.equals((Object) database1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      DatabaseStatus databaseStatus0 = DatabaseStatus.value5;
      Property[] propertyArray0 = new Property[7];
      Database database0 = new Database();
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[3];
      Database database1 = new Database(databaseStatus0, propertyArray0, databaseComponentArray0);
      boolean boolean0 = database1.equals((Object) database0);
      assertFalse(database0.equals(database1));
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseStatus databaseStatus0 = DatabaseStatus.value5;
      Property[] propertyArray0 = new Property[7];
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[3];
      Database database0 = new Database(databaseStatus0, propertyArray0, databaseComponentArray0);
      Database database1 = new Database(databaseStatus0, propertyArray0, databaseComponentArray0);
      boolean boolean0 = database0.equals((Object) database1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Database database0 = new Database();
      Property[] propertyArray0 = new Property[11];
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[3];
      Database database1 = new Database((DatabaseStatus) null, propertyArray0, databaseComponentArray0);
      boolean boolean0 = database0.equals((Object) database1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Database database0 = new Database();
      Property[] propertyArray0 = new Property[9];
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[14];
      Database database1 = new Database((DatabaseStatus) null, propertyArray0, databaseComponentArray0);
      boolean boolean0 = database1.equals((Object) database0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Database database0 = new Database();
      int int0 = database0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      DatabaseStatus databaseStatus0 = DatabaseStatus.value8;
      Property[] propertyArray0 = new Property[9];
      Property property0 = new Property();
      propertyArray0[1] = property0;
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[4];
      Database database0 = new Database(databaseStatus0, propertyArray0, databaseComponentArray0);
      int int0 = database0.hashCode();
      assertEquals(434626293, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      DatabaseStatus databaseStatus0 = DatabaseStatus.value7;
      Property[] propertyArray0 = new Property[14];
      DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[15];
      DatabaseComponent databaseComponent0 = new DatabaseComponent(propertyArray0, databaseStatus0);
      databaseComponentArray0[7] = databaseComponent0;
      Database database0 = new Database(databaseStatus0, propertyArray0, databaseComponentArray0);
      int int0 = database0.hashCode();
      assertEquals((-748135752), int0);
  }
}
