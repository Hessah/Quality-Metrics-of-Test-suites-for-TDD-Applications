/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.saphostcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.saphostcontrol.InstanceSelector;
import com.sap.managementconsole.soap.axis.saphostcontrol.InstanceStatus;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.BeanDeserializer;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InstanceSelectorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      InstanceSelector instanceSelector0 = new InstanceSelector();
      InstanceSelector instanceSelector1 = new InstanceSelector((InstanceStatus) null, "e");
      boolean boolean0 = instanceSelector0.equals((Object) instanceSelector1);
      assertFalse(instanceSelector1.equals(instanceSelector0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = Object.class;
      QName qName0 = new QName("e");
      BeanSerializer beanSerializer0 = (BeanSerializer)InstanceSelector.getSerializer("e", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", beanSerializer0.getMechanismType());
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = Object.class;
      QName qName0 = new QName("e");
      BeanDeserializer beanDeserializer0 = (BeanDeserializer)InstanceSelector.getDeserializer("e", (Class) class0, qName0);
      assertEquals(false, beanDeserializer0.componentsReady());
  }

  @Test
  public void test3()  throws Throwable  {
      InstanceSelector instanceSelector0 = new InstanceSelector();
      instanceSelector0.setAHostname("Qu-F1Osn");
      InstanceSelector instanceSelector1 = new InstanceSelector((InstanceStatus) null, "z");
      boolean boolean0 = instanceSelector0.equals((Object) instanceSelector1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TypeDesc typeDesc0 = InstanceSelector.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test5()  throws Throwable  {
      InstanceSelector instanceSelector0 = new InstanceSelector();
      boolean boolean0 = instanceSelector0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      InstanceStatus instanceStatus0 = InstanceStatus.value1;
      InstanceSelector instanceSelector0 = new InstanceSelector(instanceStatus0, "Sw*\"nM< ywcGZ$&iH)");
      InstanceSelector instanceSelector1 = new InstanceSelector(instanceStatus0, "Sw*\"nM< ywcGZ$&iH)");
      boolean boolean0 = instanceSelector1.equals((Object) instanceSelector0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      InstanceSelector instanceSelector0 = new InstanceSelector();
      InstanceSelector instanceSelector1 = new InstanceSelector();
      assertTrue(instanceSelector1.equals(instanceSelector0));
      
      InstanceStatus instanceStatus0 = InstanceStatus.value4;
      instanceSelector1.setAInstanceStatus(instanceStatus0);
      boolean boolean0 = instanceSelector0.equals((Object) instanceSelector1);
      assertFalse(instanceSelector1.equals(instanceSelector0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      InstanceStatus instanceStatus0 = InstanceStatus.value1;
      InstanceSelector instanceSelector0 = new InstanceSelector(instanceStatus0, "Sw*\"nM< ywcGZ$&iH)");
      InstanceSelector instanceSelector1 = new InstanceSelector();
      boolean boolean0 = instanceSelector0.equals((Object) instanceSelector1);
      assertFalse(instanceSelector1.equals(instanceSelector0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      InstanceSelector instanceSelector0 = new InstanceSelector();
      InstanceSelector instanceSelector1 = new InstanceSelector();
      boolean boolean0 = instanceSelector0.equals((Object) instanceSelector1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      InstanceSelector instanceSelector0 = new InstanceSelector();
      int int0 = instanceSelector0.hashCode();
      assertEquals(1, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      InstanceStatus instanceStatus0 = InstanceStatus.value1;
      InstanceSelector instanceSelector0 = new InstanceSelector(instanceStatus0, "Sw*\"nM< ywcGZ$&iH)");
      int int0 = instanceSelector0.hashCode();
      assertEquals(356319024, int0);
  }
}
