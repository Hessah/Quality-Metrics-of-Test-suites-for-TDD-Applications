/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.saphostcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.saphostcontrol.InstanceStatus;
import java.io.ObjectStreamException;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.EnumDeserializer;
import org.apache.axis.encoding.ser.EnumSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class InstanceStatusEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      QName qName0 = new QName("8", "8");
      Class<?> class0 = InstanceStatus.class;
      EnumSerializer enumSerializer0 = (EnumSerializer)InstanceStatus.getSerializer("8", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", enumSerializer0.getMechanismType());
  }

  @Test
  public void test1()  throws Throwable  {
      InstanceStatus instanceStatus0 = InstanceStatus.fromString("S-RUNNING");
      assertEquals("S-RUNNING", instanceStatus0.toString());
      assertNotNull(instanceStatus0);
  }

  @Test
  public void test2()  throws Throwable  {
      try {
        InstanceStatus.fromValue("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Class<?> class0 = InstanceStatus.class;
      EnumDeserializer enumDeserializer0 = (EnumDeserializer)InstanceStatus.getDeserializer("", (Class) class0, (QName) null);
      assertEquals(false, enumDeserializer0.componentsReady());
  }

  @Test
  public void test4()  throws Throwable  {
      InstanceStatus instanceStatus0 = InstanceStatus.value1;
      int int0 = instanceStatus0.hashCode();
      assertEquals((-555606432), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      TypeDesc typeDesc0 = InstanceStatus.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test6()  throws Throwable  {
      try {
        InstanceStatus.fromValue("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      InstanceStatus instanceStatus0 = new InstanceStatus("S-RUNNING");
      assertNotNull(instanceStatus0);
      assertEquals("S-RUNNING", instanceStatus0.getValue());
  }

  @Test
  public void test8()  throws Throwable  {
      try {
        InstanceStatus.fromValue("\".");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      InstanceStatus instanceStatus0 = InstanceStatus.value2;
      boolean boolean0 = instanceStatus0.equals((Object) "");
      assertEquals(false, boolean0);
  }
}
