/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.saphostcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.saphostcontrol.ACOperation;
import com.sap.managementconsole.soap.axis.saphostcontrol.CancelOperationType;
import com.sap.managementconsole.soap.axis.saphostcontrol.DatabaseComponent;
import com.sap.managementconsole.soap.axis.saphostcontrol.InstanceOptionsFlags;
import com.sap.managementconsole.soap.axis.saphostcontrol.InstanceSelector;
import com.sap.managementconsole.soap.axis.saphostcontrol.InstanceServiceOperation;
import com.sap.managementconsole.soap.axis.saphostcontrol.InstanceStatus;
import com.sap.managementconsole.soap.axis.saphostcontrol.OperationException;
import com.sap.managementconsole.soap.axis.saphostcontrol.OperationOptions;
import com.sap.managementconsole.soap.axis.saphostcontrol.Property;
import com.sap.managementconsole.soap.axis.saphostcontrol.SAPHostControl_BindingStub;
import com.sap.managementconsole.soap.axis.saphostcontrol.SAPInstance;
import com.sap.managementconsole.soap.axis.saphostcontrol.holders.ArrayOfDatabaseComponentHolder;
import com.sap.managementconsole.soap.axis.saphostcontrol.holders.DatabaseStatusHolder;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.rmi.RemoteException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.axis.AxisFault;
import org.apache.axis.EngineConfiguration;
import org.apache.axis.NoEndPointException;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.axis.configuration.BasicClientConfig;
import org.apache.axis.deployment.wsdd.WSDDDeployment;
import org.apache.axis.transport.java.Handler;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SAPHostControl_BindingStubEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          sAPHostControl_BindingStub0.createCall();
          sAPHostControl_BindingStub0.createCall();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          sAPHostControl_BindingStub0.setMaintainSession(false);
          sAPHostControl_BindingStub0.createCall();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          sAPHostControl_BindingStub0.setUsername("");
          sAPHostControl_BindingStub0.createCall();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Handler handler0 = new Handler();
          URL uRL0 = new URL("s=&1$zgB5(=hm", "s=&1$zgB5(=hm", 1814, "s=&1$zgB5(=hm", (URLStreamHandler) handler0);
          Service service0 = new Service();
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub(uRL0, (javax.xml.rpc.Service) service0);
          Property[] propertyArray0 = new Property[2];
          try {
            sAPHostControl_BindingStub0.getCIMObject(propertyArray0);
            fail("Expecting exception: AxisFault");
          } catch(AxisFault e) {
            /*
             * No client transport named 'null' found!
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          sAPHostControl_BindingStub0.setTimeout(0);
          Call call0 = sAPHostControl_BindingStub0.createCall();
          assertEquals(false, call0.getMaintainSession());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          sAPHostControl_BindingStub0.setPortName("");
          Call call0 = sAPHostControl_BindingStub0.createCall();
          assertEquals("", call0.getEncodingStyle());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          InstanceStatus instanceStatus0 = InstanceStatus.value2;
          InstanceSelector instanceSelector0 = new InstanceSelector(instanceStatus0, "#Kb9kc`a$8\"sN.l4N");
          try {
            sAPHostControl_BindingStub0.listInstances(instanceSelector0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          SAPInstance sAPInstance0 = new SAPInstance();
          OperationOptions operationOptions0 = new OperationOptions();
          try {
            sAPHostControl_BindingStub0.startInstance(sAPInstance0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          OperationOptions operationOptions0 = new OperationOptions();
          try {
            sAPHostControl_BindingStub0.stopInstance((SAPInstance) null, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          BasicClientConfig basicClientConfig0 = new BasicClientConfig();
          AxisClient axisClient0 = new AxisClient((EngineConfiguration) basicClientConfig0);
          Service service0 = new Service((EngineConfiguration) basicClientConfig0, axisClient0);
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub((javax.xml.rpc.Service) service0);
          InstanceServiceOperation instanceServiceOperation0 = new InstanceServiceOperation();
          OperationOptions operationOptions0 = new OperationOptions();
          try {
            sAPHostControl_BindingStub0.callServiceOperation(instanceServiceOperation0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          ACOperation[] aCOperationArray0 = new ACOperation[1];
          OperationOptions operationOptions0 = new OperationOptions();
          try {
            sAPHostControl_BindingStub0.ACOSPrepare(aCOperationArray0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          try {
            sAPHostControl_BindingStub0.getOperationResults(">Y>;@}m9uW~uo&=", (OperationOptions) null);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          WSDDDeployment wSDDDeployment0 = new WSDDDeployment();
          AxisClient axisClient0 = new AxisClient((EngineConfiguration) wSDDDeployment0);
          Service service0 = new Service((EngineConfiguration) wSDDDeployment0, axisClient0);
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub((javax.xml.rpc.Service) service0);
          CancelOperationType cancelOperationType0 = CancelOperationType.value1;
          InstanceOptionsFlags[] instanceOptionsFlagsArray0 = new InstanceOptionsFlags[5];
          OperationOptions operationOptions0 = new OperationOptions(0L, instanceOptionsFlagsArray0);
          try {
            sAPHostControl_BindingStub0.cancelOperation("ew72>_#kOiEki$ya", cancelOperationType0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          try {
            sAPHostControl_BindingStub0.isOperationFinished("=yv>@,$CpGre`II3");
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          OperationOptions operationOptions0 = new OperationOptions();
          Property[] propertyArray0 = new Property[2];
          try {
            sAPHostControl_BindingStub0.executeOperation("!}.j^V~&'g;", propertyArray0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[2];
          try {
            sAPHostControl_BindingStub0.getCIMObject(propertyArray0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[13];
          try {
            sAPHostControl_BindingStub0.getComputerSystem(propertyArray0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[6];
          try {
            sAPHostControl_BindingStub0.listDatabases(propertyArray0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[6];
          DatabaseComponent[] databaseComponentArray0 = new DatabaseComponent[2];
          ArrayOfDatabaseComponentHolder arrayOfDatabaseComponentHolder0 = new ArrayOfDatabaseComponentHolder(databaseComponentArray0);
          DatabaseStatusHolder databaseStatusHolder0 = new DatabaseStatusHolder();
          try {
            sAPHostControl_BindingStub0.getDatabaseStatus(propertyArray0, arrayOfDatabaseComponentHolder0, databaseStatusHolder0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          OperationOptions operationOptions0 = new OperationOptions();
          Property[] propertyArray0 = new Property[7];
          try {
            sAPHostControl_BindingStub0.startDatabase(propertyArray0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[14];
          OperationOptions operationOptions0 = new OperationOptions();
          try {
            sAPHostControl_BindingStub0.stopDatabase(propertyArray0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[8];
          OperationOptions operationOptions0 = new OperationOptions();
          try {
            sAPHostControl_BindingStub0.attachDatabase(propertyArray0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[2];
          InstanceOptionsFlags[] instanceOptionsFlagsArray0 = new InstanceOptionsFlags[4];
          OperationOptions operationOptions0 = new OperationOptions(576L, instanceOptionsFlagsArray0);
          try {
            sAPHostControl_BindingStub0.detachDatabase(propertyArray0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[10];
          try {
            sAPHostControl_BindingStub0.getDatabaseProperties(propertyArray0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          BasicClientConfig basicClientConfig0 = new BasicClientConfig();
          AxisClient axisClient0 = new AxisClient((EngineConfiguration) basicClientConfig0);
          Service service0 = new Service((EngineConfiguration) basicClientConfig0, axisClient0);
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub((javax.xml.rpc.Service) service0);
          Property[] propertyArray0 = new Property[10];
          try {
            sAPHostControl_BindingStub0.setDatabaseProperty(propertyArray0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = new SAPHostControl_BindingStub();
          Property[] propertyArray0 = new Property[2];
          InstanceOptionsFlags[] instanceOptionsFlagsArray0 = new InstanceOptionsFlags[6];
          OperationOptions operationOptions0 = new OperationOptions((-1496L), instanceOptionsFlagsArray0);
          try {
            sAPHostControl_BindingStub0.liveDatabaseUpdate(propertyArray0, operationOptions0);
            fail("Expecting exception: NoEndPointException");
          } catch(NoEndPointException e) {
            /*
             * No endpoint
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
