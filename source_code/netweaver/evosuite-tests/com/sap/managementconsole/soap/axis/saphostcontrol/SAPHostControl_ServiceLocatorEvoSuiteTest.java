/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.saphostcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.saphostcontrol.SAPHostControl_BindingStub;
import com.sap.managementconsole.soap.axis.saphostcontrol.SAPHostControl_ServiceLocator;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.xml.namespace.QName;
import javax.xml.rpc.ServiceException;
import org.apache.axis.EngineConfiguration;
import org.apache.axis.deployment.wsdd.WSDDConstants;
import org.apache.xerces.impl.dtd.XMLContentSpec;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.xml.sax.DTDHandler;

@RunWith(EvoSuiteRunner.class)
public class SAPHostControl_ServiceLocatorEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator();
          QName qName0 = sAPHostControl_ServiceLocator0.getServiceName();
          sAPHostControl_ServiceLocator0.setEndpointAddress(qName0, (String) null);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator();
          QName qName0 = sAPHostControl_ServiceLocator0.getServiceName();
          Class<?> class0 = DTDHandler.class;
          SAPHostControl_BindingStub sAPHostControl_BindingStub0 = (SAPHostControl_BindingStub)sAPHostControl_ServiceLocator0.getPort(qName0, (Class) class0);
          assertEquals("urn:SAPHostControl", qName0.getNamespaceURI());
          assertEquals("SAPHostControl", sAPHostControl_ServiceLocator0.getSAPHostControlWSDDServiceName());
          assertNotNull(sAPHostControl_BindingStub0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator();
          String string0 = sAPHostControl_ServiceLocator0.getSAPHostControlAddress();
          assertEquals("http://localhost:1128/SAPHostControl.cgi", string0);
          assertEquals("SAPHostControl", sAPHostControl_ServiceLocator0.getSAPHostControlWSDDServiceName());
          assertNotNull(string0);
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator((EngineConfiguration) null);
          QName qName0 = WSDDConstants.QNAME_OPERATION;
          Class<?> class0 = SAPHostControl_ServiceLocator.class;
          try {
            sAPHostControl_ServiceLocator0.getPort(qName0, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  com.sap.managementconsole.soap.axis.saphostcontrol.SAPHostControl_ServiceLocator
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator();
          assertEquals("SAPHostControl", sAPHostControl_ServiceLocator0.getSAPHostControlWSDDServiceName());
          
          sAPHostControl_ServiceLocator0.setSAPHostControlWSDDServiceName(" ");
          assertEquals("http://localhost:1128/SAPHostControl.cgi", sAPHostControl_ServiceLocator0.getSAPHostControlAddress());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator();
          Class<?> class0 = XMLContentSpec.Provider.class;
          try {
            sAPHostControl_ServiceLocator0.getPort((QName) null, (Class) class0);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             * There is no stub implementation for the interface:  org.apache.xerces.impl.dtd.XMLContentSpec$Provider
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator();
          Iterator<Object> iterator0 = sAPHostControl_ServiceLocator0.getPorts();
          assertNotNull(iterator0);
          
          Iterator<Object> iterator1 = sAPHostControl_ServiceLocator0.getPorts();
          assertEquals("http://localhost:1128/SAPHostControl.cgi", sAPHostControl_ServiceLocator0.getSAPHostControlAddress());
          assertEquals("SAPHostControl", sAPHostControl_ServiceLocator0.getSAPHostControlWSDDServiceName());
          assertEquals(true, iterator1.hasNext());
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          SAPHostControl_ServiceLocator sAPHostControl_ServiceLocator0 = new SAPHostControl_ServiceLocator();
          QName qName0 = WSDDConstants.QNAME_COM_PROVIDER;
          try {
            sAPHostControl_ServiceLocator0.setEndpointAddress(qName0, (String) null);
            fail("Expecting exception: ServiceException");
          } catch(ServiceException e) {
            /*
             *  Cannot set Endpoint Address for Unknown PortCOM
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
