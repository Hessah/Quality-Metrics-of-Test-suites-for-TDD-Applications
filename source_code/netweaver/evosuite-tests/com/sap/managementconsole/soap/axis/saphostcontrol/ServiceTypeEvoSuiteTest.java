/*
 * This file was automatically generated by EvoSuite
 */

package com.sap.managementconsole.soap.axis.saphostcontrol;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sap.managementconsole.soap.axis.saphostcontrol.ServiceType;
import java.io.ObjectStreamException;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.ser.EnumDeserializer;
import org.apache.axis.encoding.ser.EnumSerializer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ServiceTypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = ServiceType.class;
      EnumDeserializer enumDeserializer0 = (EnumDeserializer)ServiceType.getDeserializer("", (Class) class0, (QName) null);
      assertEquals("Axis SAX Mechanism", enumDeserializer0.getMechanismType());
  }

  @Test
  public void test1()  throws Throwable  {
      ServiceType serviceType0 = ServiceType.fromString("T-DB-SERVICE");
      assertNotNull(serviceType0);
      assertEquals("T-DB-SERVICE", serviceType0.getValue());
  }

  @Test
  public void test2()  throws Throwable  {
      ServiceType serviceType0 = ServiceType.value1;
      int int0 = serviceType0.hashCode();
      assertEquals(2547863, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      try {
        ServiceType.fromValue("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ServiceType serviceType0 = new ServiceType("T-DB-SERVICE");
      assertNotNull(serviceType0);
      assertEquals("T-DB-SERVICE", serviceType0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      QName qName0 = new QName("8", "8");
      Class<?> class0 = ServiceType.class;
      EnumSerializer enumSerializer0 = (EnumSerializer)ServiceType.getSerializer("8", (Class) class0, qName0);
      assertEquals("Axis SAX Mechanism", enumSerializer0.getMechanismType());
  }

  @Test
  public void test6()  throws Throwable  {
      TypeDesc typeDesc0 = ServiceType.getTypeDesc();
      assertEquals(false, typeDesc0.hasAttributes());
  }

  @Test
  public void test7()  throws Throwable  {
      try {
        ServiceType.fromValue("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      try {
        ServiceType.fromValue("\".");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ServiceType serviceType0 = ServiceType.value2;
      boolean boolean0 = serviceType0.equals((Object) "");
      assertEquals(false, boolean0);
  }
}
